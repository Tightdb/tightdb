#
# C++ reference documentation for the TableView (typed) class.
#

ID         : class_typed_tableview
TITLE      : TableView (typed)
SUMMARY    : &g_typed_view_intro_summary
             The TableView class.
DESCR      : &g_typed_view_intro_descr
             >
             NOTE: The current documentation of Typed TableView is under construction,
             and not completely correct yet.

             Queries and searches can return <code>TableView</code>
             objects, which works as virtual tables containing just
             the matched rows. You can interact with a
             <code>TableView</code> just like a regular table.

             A {@link class_typed_tableview} is implicitely linked to a
             {@link class_typed_table}. All changes to the view will
             propagate to the original (or source) table. This includes
             operations like updating values and deleting rows.

             Notice that this does not imply that it will work the
             opposite direction. Any change that adds or removes rows
             in the original table will invalidate the view, and you
             will have an inconsistent view of the table. This might
             lead to a serious data corruption.

             It is possible to create two or more views for the table as
             long as you do not change the original table.
SEE        :
EXAMPLES   :
- DESCR    :
  CODE     : ex_cpp_typed_view_intro
IGNORE     : []
CATEGORIES :

- State:
  METHODS:
  - g_typed_view_size:
      NAME     : size
      SUMMARY  : &g_typed_view_size_summary
                 Number of rows.
      DESCR    : &g_typed_view_size_descr
                 This method returns the number of rows in the table view.
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : &g_typed_view_size_return1_descr
                 The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_size
        DESCR  :

  - g_typed_view_is_empty:
      NAME     : is_empty
      SUMMARY  : &g_typed_view_is_empty_summary
                 Is view empty.
      DESCR    : &g_typed_view_is_empty_descr
                 This method checks if the view is empty that is, it has zero rows.
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_is_empty
        DESCR  :

- View:
  METHODS:
  - g_typed_view_clear:
      NAME     : clear
      SUMMARY  : *g_typed_table_clear_summary
      DESCR    : &g_typed_view_clear_descr
                 >
                 This method will remove all rows in a view. This implies that
                 the rows in the originating table will be removed.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_clear
        DESCR  :

- Rows:
  METHODS:
  - g_typed_view_get_source_ndx:
      NAME     : get_source_ndx
      SUMMARY  : &g_typed_view_get_source_ndx_summary
                 Get source index.
      DESCR    : &g_typed_view_get_source_ndx_descr
                 This method will get the index of the row in the source table.
      CONST    : True
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_typed_view_parameter_row_position_descr
                 The row index.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_typed_view_return_row_position_descr
                 The row index.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_get_source_ndx
        DESCR  :

  - g_typed_view_remove_row:
      NAME     : remove
      SUMMARY  : *g_typed_table_remove_row_summary
      DESCR    : *g_typed_table_remove_row_descr
      SIGNATURE: void remove(size_t row_ndx);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_view_parameter_row_position_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove
        DESCR  :

  - g_typed_view_remove_last_row:
      NAME     : remove_last
      SUMMARY  : *g_typed_table_remove_last_row_summary
      DESCR    : *g_typed_table_remove_last_row_descr
      SIGNATURE: void remove_last();
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove_last_row
        DESCR  :


- Values:
  METHODS:
  - g_typed_view_get_bool:
  - g_typed_view_get_int:
  - g_typed_view_get_float:
  - g_typed_view_get_double:
  - g_typed_view_get_date:
  - g_typed_view_get_string:
  - g_typed_view_get_binary:
  - g_typed_view_get_mixed:
  - g_typed_view_get_mixed_type:
  - g_typed_view_get_subtable:
  - g_typed_view_get_subtable_const:
      NAMES    : [get, get, get, get, get, get, get, get, get_type, get, get]
      TITLE    : get_*
      SUMMARY  : &g_typed_view_get_summary
                 Get value.
      DESCR    : This method retrieves the value of a cell.
      SIGNATURE: |
                 bool          get(size_t row_ndx) const;
                 int64_t       get(size_t row_ndx) const;
                 float         get(size_t row_ndx) const;
                 double        get(size_t row_ndx) const;
                 DateTime      get(size_t row_ndx) const;
                 StringData    get(size_t row_ndx) const;
                 BinaryData    get(size_t row_ndx) const;
                 Mixed         get(size_t row_ndx) const;
                 DataType      get_type(size_t row_ndx) const
                 TableRef      get(size_t row_ndx);
                 ConstTableRef get(size_t row_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_view_parameter_row_position_descr
      RETURN:
        TYPES  : [bool, int64_t, float, double, DateTime, StringData, BinaryData, Mixed, DataType, TableRef, ConstTableRef]
        DESCR  : &g_typed_view_value_return_descr
                 The value.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_get_xxx
        DESCR  :

  - g_typed_view_set_bool:
  - g_typed_view_set_int:
  - g_typed_view_set_float:
  - g_typed_view_set_double:
  - g_typed_view_set_enum:
  - g_typed_view_set_date:
  - g_typed_view_set_string:
  - g_typed_view_set_binary:
  - g_typed_view_set_mixed:
      NAMES    : [set, set, set, set, set, set, set, set, set]
      TITLE    : set_*
      SUMMARY  : &g_typed_view_set_mixed_summary
                 Set value.
      DESCR    : &g_typed_view_set_mixed_descr
                 This method sets the value of a cell.
      SIGNATURE: |
                 void set(size_t row_ndx, bool value);
                 void set(size_t row_ndx, int64_t value);
                 void set(size_t row_ndx, float value);
                 void set(size_t row_ndx, double value);
                 void set(size_t row_ndx, EnumType value);
                 void set(size_t row_ndx, DateTime value);
                 void set(size_t row_ndx, StringData value);
                 void set(size_t row_ndx, BinaryData value);
                 void set(size_t row_ndx, Mixed value);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_view_parameter_row_position_descr
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, EnumType, DateTime, StringData, BinaryData, Mixed]
        DESCR  : &g_typed_view_value_parameter_descr
                 The value.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_set_xxx
        DESCR  :

- Sub-tables:
  METHODS:
  - g_typed_view_get_subtable_size:
      NAME     : get_subtable_size
      SUMMARY  : &g_typed_view_get_subtable_size_summary
                 Get size of subtable.
      DESCR    : &g_typed_view_get_subtable_size_descr
                 This method gets the size (number of rows) of a subtable.
      CONST    : true
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_view_parameter_row_position_descr
      RETURN:
        TYPES  : size_t
        DESCR  : *g_typed_view_size_return1_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_get_subtable
        DESCR  :
  - g_typed_view_clear_subtable:
      NAME     : clear_subtable
      SUMMARY  : &g_typed_view_clear_subtable_summary
                 Remove rows in subtable.
      DESCR    : &g_typed_view_clear_subtable_descr
                 This method removes all rows in a subtable.
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_view_parameter_row_position_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_clear_subtable
        DESCR  :


- Searching:
  METHODS:
  - g_typed_view_find_first_bool:
  - g_typed_view_find_first_int:
  - g_typed_view_find_first_float:
  - g_typed_view_find_first_double:
  - g_typed_view_find_first_date:
  - g_typed_view_find_first_string:
      NAMES    : [find_first, find_first, find_first, find_first, find_first, find_first, ]
      TITLE    : find_first_*
      SUMMARY  : &g_typed_view_find_first_string_summary
                 Find first match row.
      DESCR    : &g_typed_view_find_first_string_descr
                 This method finds the first matching row.
      SIGNATURE: |
                 size_t find_first(bool value) const;
                 size_t find_first(int64_t value) const;
                 size_t find_first(float value) const;
                 size_t find_first(double value) const;
                 size_t find_first(DateTime value) const;
                 size_t find_first(StringData value) const;
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, DateTime, StringData]
        DESCR  : *g_typed_view_value_parameter_descr
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>std::size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_find_first_xxx
        DESCR  :

  - g_typed_view_find_all_bool:
  - g_typed_view_find_all_int:
  - g_typed_view_find_all_date:
  - g_typed_view_find_all_float:
  - g_typed_view_find_all_double:
  - g_typed_view_find_all_string:
  - g_typed_view_find_all_bool_const:
  - g_typed_view_find_all_int_const:
  - g_typed_view_find_all_float_const:
  - g_typed_view_find_all_double_double:
  - g_typed_view_find_all_date_const:
  - g_typed_view_find_all_string_const:
      NAMES    : [find_all, find_all, find_all, find_all, find_all, find_all,
                  find_all, find_all, find_all, find_all, find_all, find_all]
      TITLE    : find_all_*
      SUMMARY  : Find all matching rows.
      DESCR    : >
                 This method finds all matching rows and returns a new {@link class_typed_tableview} object. Beware,
                 changes to the returning view will propagate back to the source table but changes in the current
                 view will not propagate forward.
      SIGNATURE: |
                 TableView      find_all(bool value);
                 TableView      find_all(int64_t value);
                 TableView      find_all(float value);
                 TableView      find_all(double value);
                 TableView      find_all(DateTime value);
                 TableView      find_all(StringData value);

                 ConstTableView find_all(bool value) const;
                 ConstTableView find_all(int64_t value) const;
                 ConstTableView find_all(float value) const;
                 ConstTableView find_all(double value) const;
                 ConstTableView find_all(DateTime value) const;
                 ConstTableView find_all(StringData value) const;
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, DateTime, StringData,
                  bool, int64_t, float, double, DateTime, StringData]
        DESCR  : *g_typed_view_value_parameter_descr
      RETURN:
        TYPES  : TableView
        DESCR  : &g_typed_view_find_all_return1_descr
                 The view.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_find_all_xxx
        DESCR  :

  - g_typed_view_sort:
      NAME     : sort
      SUMMARY  : &g_typed_view_get_sorted_view_summary
                 Sort the view.
      DESCR    : &g_typed_view_get_sorted_view_desc
                 This method will sort the rows by using values of a given column.
      PARAMS:
      - NAME   : ascending
        TYPES  : bool
        DESCR  : "If <code>true</code>, rows are sorted ascending. Default: <code>true</code>."
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_sort
        DESCR  :


- Aggregates:
  METHODS:
  - g_typed_view_sum_int:
  - g_typed_view_sum_float:
  - g_typed_view_sum_double:
      NAMES    : [sum, sum, sum]
      SUMMARY  : &g_typed_view_sum_summary
                 Calculates the sum.
      DESCR    : &g_typed_view_sum_descr
                 Calculates the sum of a column.
      CONST    : True
      SIGNATURE: |
                 int64_t sum() const;
                 double  sum() const;
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The sum.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_sum
        DESCR  :
  - g_typed_view_maximum_int:
  - g_typed_view_maximum_float:
  - g_typed_view_maximum_double:
      NAMES    : [maximum, maximum, maximum]
      SUMMARY  : &g_typed_view_maximum_summary
                 Find highest value.
      DESCR    : &g_typed_view_maximum_descr
                 Find the highest value.
      CONST    : True
      SIGNATURE: |
                 int64_t maximum() const;
                 float   maximum() const;
                 double  maximum() const;
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_typed_view_maximum_return1_descr
                 The maximum value.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_maximum
        DESCR  :
  - g_typed_view_minimum_int:
  - g_typed_view_minimum_float:
  - g_typed_view_minimum_double:
      NAMES    : [minimum, minimum, minimum]
      SUMMARY  : &g_typed_view_minimum_summary
                 Find lowest value.
      DESCR    : &g_typed_view_minimum_descr
                 Find the lowest value.
      CONST    : True
      SIGNATURE: |
                 int64_t minimum() const;
                 float   minimum() const;
                 double  minimum() const;
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_typed_view_minimum_return1_descr
                 The minimum value.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_minimum
        DESCR  :
  - g_typed_view_average_int:
  - g_typed_view_average_float:
  - g_typed_view_average_double:
      NAMES    : [average, average, average]
      SUMMARY  : &g_typed_view_average_summary
                 Find lowest value.
      DESCR    : &g_typed_view_average_descr
                 Find the lowest value.
      CONST    : True
      SIGNATURE: double average() const;
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_typed_view_average_return1_descr
                 The average value.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_average
        DESCR  :

- Dump:
  METHODS:
  - g_typed_view_to_json:
      NAME     : to_json
      SUMMARY  : &g_typed_view_to_json_summary
                 Convert view to JSON.
      DESCR    : &g_typed_view_to_json_descr
                 The JavaScript Object Notation (<a
                 href="http://json.org">JSON</a>) is useful for
                 web/mobile applications and serialization. This
                 method will convert a view and its columns and rows
                 to a JSON compatible representation.
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_typed_view_to_json_parm1_descr
                 Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_to_json
        DESCR  :

  - g_typed_view_to_string:
      NAME     : to_string
      SUMMARY  : &g_typed_view_to_string_summary
                 Convert view to a string.
      DESCR    : &g_typed_view_to_string_descr
                 This method will convert a view and its columns and rows
                 to a human readable format.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_typed_view_to_string_parm1_descr
                 Output stream.
      - NAME   : limit
        TYPES  : size_t
        DESCR  : &g_typed_view_to_string_parm2_descr
                 "The number of rows to convert. Default: 500."
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_to_string
        DESCR  :

  - g_typed_view_row_to_string:
      NAME     : row_to_string
      SUMMARY  : &g_typed_view_row_to_string_summary
                 Convert a row to a string.
      DESCR    : &g_typed_view_row_to_string_descr
                 This method will convert a specified row to a
                 human readable format.
      CONST    : true
      PARAMS:
      - NAME   : row_ndx
        TYPES  : std::size_t
        DESCR  : &g_typed_view_row_to_string_parm1_descr
                 The index of the row to convert.
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : *g_typed_view_to_string_parm1_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_view_to_string
        DESCR  :
