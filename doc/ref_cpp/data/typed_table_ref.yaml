#
# C++ reference documentation for the Table (typed) class.
#

ID         : class_typed_table
TITLE      : Table (typed)
SUMMARY    : &g_typed_table_summary
             Typed table.
DESCR      : &g_typed_table_descr
             >
             The Table class is the core class of the TightDB framework. It allows you
             to efficiently work with data in terms of rows and columns. The value of
             a cell (specific column, specific row) is compacted in order to keep the
             overall memory consumption as little as possible. The internal data structure
             is optimized so retrieving a particular row in a table is as fast as possible
             (often faster than native data structures).

             When the number and types of columns are known a priori, you can use a set of macros
             to define type safe and efficient table classes. The compiler can take avantage of
             a typed table and enforce type checking of the methods parameters at compile time.

             The table supports the most common types including integers, timestamps and strings.
             It is possible to use a TightDB table class as column type. This means that you can
             have tables of tables structure.

             Moreover, TightDB introduces a column type called {@link class_mixed}. A value of the
             Mixed type can be any supported value of TightDB. This implies - as the name
             indicates - that you can mix the type of values in the the column. In one row the
             value could be an integer, in another row the value could be a string or even a table.

             The aim of the TightDB table class is that it feels as close to the native data
             structures (in particular arrays) as possible.
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_cpp_typed_table_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES:
- Schema:
  METHODS:
  - g_typed_table_macros:
      NAME     : TIGHTDB_TABLE_*
      DESCR    : >
                 This set of predefined macros is used to declare type safe table classes.
                 It is possible to declare table classes with 1 to 15 columns.
      SIGNATURE: |
                 TIGHTDB_TABLE_*(ClassName,
                                 ColumnName, ColumnType
                                 ...)
      SUMMARY  : Declare type safe table classes.
      PARAMS:
      - NAME   : "*"
        TYPES  : text
        DESCR  : &g_typed_table_macros_parm1_descr
                 "Number of columns in table (range: 1 to 15)."
      - NAME   : ClassName
        TYPES  : text
        DESCR  : &g_typed_table_macros_parm2_descr
                 Name of the new class.
      - NAME   : ColumnName
        TYPES  : text
        DESCR  : &g_typed_table_macros_parm3_descr
                 Name of column.
      - NAME   : ColumnType
        TYPES  : text
        DESCR  : |
                 Column type. Following types are available:
                 <table>
                 <thead>
                 <tr><th>Name</th>              <th>Desc</th>         <th>C++ type</th>   <th>Default value</th></tr>
                 </thead>
                 <tbody>
                 <tr><td>Int</td>               <td>Integer</td>        <td>(int64_t)</td>   <td>0</td></tr>
                 <tr><td>Bool</td>              <td>Boolean</td>        <td>(bool)</td>      <td>false</td></tr>
                 <tr><td>Float</td>             <td>Floating-point</td> <td>(float)</td>     <td>0.0</td></tr>
                 <tr><td>Double</td>            <td>Floating-point</td> <td>(double)</td>    <td>0.0</td></tr>
                 <tr><td>Date</td>              <td>UTC datetime</td>   <td>(Date)</td>      <td>0 - 1970-01-01 00:00:00</td></tr>
                 <tr><td>Enum&lt;T&gt;</td>     <td>Enum</td>           <td>(T as enum type)</td></tr>
                 <tr><td>String</td>            <td>Text</td>           <td>(StringData)</td>  <td>empty - ""</td></tr>
                 <tr><td>Binary</td>            <td>Arbitrary data</td> <td>(BinaryData)</td>  <td>empty</td></tr>
                 <tr><td>Subtable&lt;T&gt;</td> <td>Sub-tables</td>     <td>(T as table class)</td><td>empty - <code>NULL</code></td></tr>
                 <tr><td>Mixed</td>             <td>Dynamic</td>        <td>(any of the above)</td><td>empty - <code>NULL</code></td></tr>
                 </tbody>
                 </table>
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_macros
        DESCR  :


- Table Operations:
  METHODS:
  - g_typed_table_is_empty:
      NAME     : is_empty
      DESCR    : &g_typed_table_is_empty_descr
                 This method checks if the table is empty (contains no rows).
      SUMMARY  : &g_typed_table_is_empty_summary
                 Is table empty?
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : &g_typed_table_true_false
                 <code>true</code> if table is empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   :  ex_cpp_type_table_is_empty
        DESCR  :

  - g_typed_table_size:
      NAME     : size
      DESCR    : &g_typed_table_size_descr
                 This method retrieves the number of rows in table.
      SUMMARY  : &g_typed_table_size_summary
                 Number of rows in table.
      CONST    : true
      RETURN:
        TYPES  : size_t
        DESCR  : &g_typed_table_size_return1_descr
                 Number of rows in table.
      EXAMPLES:
      - CODE   :  ex_cpp_type_table_size
        DESCR  :

  - g_typed_table_clear:
      NAME     : clear
      SUMMARY  : &g_typed_table_clear_summary
                 Remove all rows.
      DESCR    : &g_typed_table_clear_descr
                 This method will remove all rows in a table.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_clear
        DESCR  :

  - g_typed_table_optimize:
      NAME     : optimize
      SUMMARY  : &g_typed_table_optimize_summary
                 Optimize a table.
      DESCR    : &g_typed_table_optimize_descr
                 >
                 This method will optimize the internal data structures of a table.
                 The result is that the table will consume less memory and queries might
                 be faster.

                 This should be called as soon as there is an representative amount of
                 data in the table. The table will then reorganize itself into the most
                 effective format.

                 What is learned about the contents will be used in all future operations,
                 so you only need to call optimize once.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_optimize
        DESCR  :

  - g_typed_table_operator==:
      NAME     : operator==
      SUMMARY  : &g_typed_table_operator_eq_summary
                 Compare two tables.
      DESCR    : &g_typed_table_operator_eq_descr
                 >
                 Compare two tables for equality. Two tables are equal if, and
                 only if, they contain the same columns and rows in the same
                 order, that is, for each value V of type T at column index C
                 and row index R in one of the tables, there is a value of type
                 T at column index C and row index R in the other table that
                 is equal to V. This method returns true if two tables are identical.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : &g_typed_table_operator_eq_parm1_descr
                 The other table.
      RETURN:
        TYPES  : bool
        DESCR  : &g_typed_table_operator_eq_return_descr
                 <code>true</code> if the two tables are equal, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator==
        DESCR  :

  - g_typed_table_operator!=:
      NAME     : operator!=
      SUMMARY  : &g_typed_table_operator_neq_summary
                 Compare two tables.
      DESCR    : &g_typed_table_operator_neq_descr
                 >
                 Compare two tables for equality. Two tables are equal if, and
                 only if, they contain the same columns and rows in the same
                 order, that is, for each value V of type T at column index C
                 and row index R in one of the tables, there is a value of type
                 T at column index C and row index R in the other table that
                 is equal to V. This method returns true if two tables are not identical.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : *g_typed_table_operator_eq_parm1_descr
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if the two tables are not equal, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_operator!=
        DESCR  :

  - g_typed_table_columns:
  - g_typed_table_columns_const:
      NAMES     : [column, column]
      SIGNATURE: |
                 ColsAccessor      column()
                 ConstColsAccessor column() const
      SUMMARY  : Access to predefined columns.
      DESCR    : The column names that you have defined in the {@link g_typed_table_macros} macro,
                 are the only members of the ColsAccessor class. It therefore provides you with
                 typesafe access to your specific columns for the table. See the example below.
      RETURN:
        TYPES  : ColumnAccessor
        DESCR  : &g_typed_table_columns_return1_descr
                 Cursor that lets you access and do operations on columns.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_columns
        DESCR  :

- column() Operations:
  METHODS:
  - v[]              # Int, bool, enum, str

  - sort            # Int, bool, enum, str

  - find_first      # Int, bool, enum, str
  - find_all        # Int, bool, enum, str
  - get_sorted_view # Int, bool, enum, str
  - distinct        # , str
  
  - has_index       # Int, bool, enum, str
  - set_index       # Int, bool, enum, str
  - lower_bound     # Int, bool, ????, str
  - upper_bound     # Int, bool, ????, str

  - +=              # Int

  - count           # Int, bool, ????, str
  - average         # Int
  - maximum         # Int
  - minimum         # Int
  - sum             # Int
  

- Row Operations:
#TODO: Describe RowAccessor
  METHODS:
  - g_typed_table_operator_brackets:
  - g_typed_table_operator_brackets_const:
      NAMES    : ["operator[]", "operator[]"]
      SIGNATURE: |
                 RowAccessor      operator[](size_t row_ndx)
                 ConstRowAccessor operator[](size_t row_ndx) const
      SUMMARY  : &g_typed_table_operator_brackets_summary
                 Access rows.

      DESCR    : &g_typed_table_operator_brackets_descr
                 Access rows.
#TODO: Describe what you can with the operator

      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_typed_table_operator_brackets_parm1_descr
                 Row index.
      RETURN:
        TYPES  : RowAccesor
        DESCR  : &g_typed_table_curser_return_descr
                 Cursor that lets you access row values as members.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_operator_brackets
        DESCR  :

  - g_typed_table_front:
  - g_typed_table_front:
      NAMES    : [front, front]
      SIGNATURE: |
                 RowAccessor      front()
                 ConstRowAccessor front() const
      SUMMARY  : &g_typed_table_front_summary
                 Get first row.
      DESCR    : This method gets the first row. Calling <code>front()</code> on an empty table is an error.
      RETURN:
        TYPES  : RowAccesor
        DESCR  : *g_typed_table_curser_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_front
        DESCR  :

  - g_typed_table_back:
  - g_typed_table_back_const:
      NAMES    : [back, back]
      SIGNATURE: |
                 RowAccessor      back()
                 ConstRowAccessor back() const
      SUMMARY  : &g_typed_table_back_summary
                 Get last row.
      DESCR    : This method gets the last row. Calling <code>back()</code> on an empty table is an error.
      RETURN:
        TYPES  : RowAccesor
        DESCR  : *g_typed_table_curser_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_back
        DESCR  :

  - g_typed_table_add:
      NAME     : add
      SIGNATURE: RowAccesor add(value, ...)
      SUMMARY  : Add new row.
      DESCR    : &g_typed_table_add_descr
                 >
                 This method adds new row. The types of the parameters must match the
                 types of the columns.
      PARAMS:
      - NAME   : "value, &#133;"
        TYPES  : various
        DESCR  : &g_typed_table_values_for_all_columns_descr
                 Values for all columns in the row.
      RETURN:
        TYPES  : RowAccesor
        DESCR  : *g_typed_table_curser_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_add
        DESCR  :

  - g_typed_table_add_empty_row:
      NAME     : add_empty_row
      SUMMARY  : &g_typed_table_add_empty_row_summary
                 >
                 This method will add one or more empty rows at the end of the table.
                 Default values (e.g. 0 or "") will be inserted for all the columns.
      DESCR    : &g_typed_table_add_empty_row_descr
                 Add empty rows.
      SIGNATURE: void add_empty_row(size_t num_rows = 1)
      PARAMS:
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : &g_typed_table_add_empty_row_parm1_descr
                 "Number of rows to add (default: 1)."
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_add_empty_row
        DESCR  :

  - g_typed_table_insert:
      NAME     : insert
      SIGNATURE: RowAccesor insert(size_t row_ndx, values, ...)
      SUMMARY  : &g_typed_table_insert_summary
                 Insert a new row at the specified position.
      DESCR    : &g_typed_table_insert_descr
                 This method inserts a new row at the specified position.
                 Rows with index greater or equal to position will be
                 shifted downwards i.e. their index will be incremented.
                 The types of the parameters must match the
                 types of the columns in the table definition.
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_typed_table_insert_position_descr
                 Insert position.
      - NAME   : "values &#133;"
        TYPES  : various
        DESCR  : *g_typed_table_values_for_all_columns_descr
      RETURN:
        TYPES  : RowAccesor
        DESCR  : *g_typed_table_curser_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_insert
        DESCR  :

  - g_typed_table_insert_empty_row:
      NAME     : insert_empty_row
      SUMMARY  : This method inserts empty rows at a given position.
                 Rows with index greater or equal to position will be
                 shifted downwards i.e. their index will be incremented.
                 The values of the cells in the new row will be assigned default
                 value of the type of the cell/column.
      DESCR    : Insert empty rows.
      SIGNATURE: void insert_empty_row(size_t row_ndx, size_t num_rows = 1)
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_typed_table_insert_position_descr
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : "Number of rows to insert (default: 1)."
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_insert_empty_row
        DESCR  :

  - g_typed_table_remove_row:
      NAME     : remove
      SUMMARY  : &g_typed_table_remove_row_summary
                 Delete row.
      DESCR    : &g_typed_table_remove_row_descr
                 This method deletes a row at a given position.
      SIGNATURE: void remove(size_t row_ndx);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_typed_table_delete_position_descr
                 Position of row to delete.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove
        DESCR  :

  - g_typed_table_remove_last_row:
      NAME     : remove_last
      SUMMARY  : &g_typed_table_remove_last_row_summary
                 Delete last row.
      DESCR    : &g_typed_table_remove_last_row_descr
                 This method delete the last row. Calling this method on an empty table is an error.
      SIGNATURE: void remove_last();
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove_last_row
        DESCR  :


- Searching:
  METHODS:
  - g_typed_table_lookup:
      NAME     : lookup
      SUMMARY  : &g_typed_table_lookup_summary
                 Lookup a value (in a hash array).
      DESCR    : &g_typed_table_lookup_descr
                 This method will find the first row where the value of first column matches
                 a given string value - emulating a hash array.
                 It's required that the first column is a string column
                 containing unique values.
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : StringData
        DESCR  : &g_typed_table_lookup_parm1_descr
                 The value to search for.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_lookup
        DESCR  :

  - g_typed_table_find_first_bool:
  - g_typed_table_find_first_int:
  - g_typed_table_find_first_float:
  - g_typed_table_find_first_double:
  - g_typed_table_find_first_date:
  - g_typed_table_find_first_string:
      NAMES    : [find_first, find_first, find_first, find_first, find_first, find_first]
      TITLE    : find_first_*
      SUMMARY  : &g_typed_table_find_first_xxx_summary
                 Find first matching row.
      DESCR    : &g_typed_table_find_first_xxx_descr
                 The method finds the first occurence of a given value in a column.
      SIGNATURE: |
                 size_t find_first(bool value) const;
                 size_t find_first(int64_t value) const;
                 size_t find_first(float value) const;
                 size_t find_first(double value) const;
                 size_t find_first(Date value) const;
                 size_t find_first(StringData value) const;
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData]
        DESCR  : &g_typed_table_value_parameter_descr
                 The value.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_find_first_xxx
        DESCR  :

  - g_typed_table_find_all_bool:
  - g_typed_table_find_all_int:
  - g_typed_table_find_all_float:
  - g_typed_table_find_all_double:
  - g_typed_table_find_all_date:
  - g_typed_table_find_all_string:
  - g_typed_table_find_all_bool_const:
  - g_typed_table_find_all_float_const:
  - g_typed_table_find_all_double_const:
  - g_typed_table_find_all_int_const:
  - g_typed_table_find_all_date_const:
  - g_typed_table_find_all_string_const:
      NAMES    : [find_all, find_all, find_all, find_all, find_all, find_all,
                  find_all, find_all, find_all, find_all, find_all, find_all]
      TITLE    : find_all_*
      SUMMARY  : &g_typed_table_find_all_xxx_summary
                 Find all matching rows.
      DESCR    : &g_typed_table_find_all_xxx_descr
                 The method finds all occurences of a given value in a specific column.
                 The rows are returned as a {@link class_typed_tableview} object.
      SIGNATURE: |
                 TableView      find_all(bool value);
                 TableView      find_all(int64_t value);
                 TableView      find_all(float value);
                 TableView      find_all(double value);
                 TableView      find_all(Date value);
                 TableView      find_all(StringData value);

                 ConstTableView find_all(bool value) const;
                 ConstTableView find_all(int64_t value) const;
                 ConstTableView find_all(float value) const;
                 ConstTableView find_all(double value) const;
                 ConstTableView find_all(Date value) const;
                 ConstTableView find_all(StringData value) const;
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData]
        DESCR  : *g_typed_table_value_parameter_descr
      RETURN:
        TYPES  : TableView
        DESCR  : &g_typed_table_find_all_return1_descr
                 The view.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_find_all_xxx
        DESCR  :

  - g_typed_table_get_sorted_view:
  - g_typed_table_get_sorted_view_const:
      NAMES    : [get_sorted_view, get_sorted_view]
      SUMMARY  : &g_typed_table_get_sorted_view_summary
                 Sort the table.
      DESCR    : &g_typed_table_get_sorted_view_desc
                 This method will sort the rows by using values of a given column.
                 The rows are returned as a {@link class_typed_tableview} object.
      SIGNATURE: |
                 TableView      get_sorted_view(bool ascending=true);
                 ConstTableView get_sorted_view(bool ascending=true) const;
      PARAMS:
      - NAME   : ascending
        TYPES  : bool
        DESCR  : &cpp_typed_table_get_sorted_view_param
                 "If <code>true</code>, rows are sorted ascending. Default: <code>true</code>."
      RETURN:
        TYPES  : TableView
        DESCR  : A view.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_get_sorted_view
        DESCR  :

  - g_typed_table_distinct:
  - g_typed_table_distinct_const:
      NAMES    : [distinct, distinct]
      SUMMARY  : &g_typed_table_distinct_summary
                 Get distinct rows.
      DESCR    : &g_typed_table_distinct_desc
                 >
                 This method will return a view with distinct rows for a given column
                 (first matching row for each unique value in column).
                 The rows are returned as a {@link class_typed_tableview} object.
      SIGNATURE: |
                 TableView      distinct();
                 ConstTableView distinct() const;
      PARAMS:
      RETURN:
        TYPES  : TableView
        DESCR  : &g_typed_table_distinct_return1_descr
                 A view containing the unique values.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_distinct
        DESCR  :

  - g_typed_table_where:
  - g_typed_table_where_const:
      NAMES    : [where, where]
      SIGNATURE: |
                 Query       where()
                 const Query where() const
      SUMMARY  : &g_typed_table_where_summery
                 Query table.
      DESCR    : This method initiates a query. See {@link class_typed_query}.
      RETURN:
        TYPES  : [Query, const Query]
        DESCR  : &g_typed_table_where_return1_descr
                 The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_table_where
