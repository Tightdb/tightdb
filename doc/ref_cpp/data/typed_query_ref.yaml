#
# C++ reference documentation for Query class
#

ID         : class_typed_query
TITLE      : Query (typed)
SUMMARY    : &g_typed_query_intro_summary
             Query your TightDB table.
DESCR      : &g_typed_query_intro_descr
             >
             Query objects are used to build up queries. A query is tied to a
             {@link class_typed_table}. The typed query class is used in conjunction with
             {@link class_typed_table}.

             Conditions is added to a query through a
             <a href="http://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a>.
             This means that the methods representing the conditions will return the
             query object.

             Conditions are split in two parts: the column name and a method for each
             predicate. Conditions are folded with logical-and if not stated otherwise.

             Once the query is ready, it is possible to reuse by multiple calls to
             the action methods.
             Moreover, it is possible extend the query with new conditions after applying an
             action method and thereby implement a drill-down. It is important to stress that
             no data is cached, and the new queries cannot benefit from previous queries.

             Alternatively, a query can result in a {@link class_typed_tableview} which can be further
             queried.
SEE        :
EXAMPLES   :
- DESCR:
  CODE: ex_cpp_typed_query_intro
IGNORE     : []
CATEGORIES :

- Conditions:
  METHODS:
  - g_typed_query_equals_bool:
  - g_typed_query_equals_int:
  - g_typed_query_equals_float:
  - g_typed_query_equals_double:
  - g_typed_query_equals_string:
  - g_typed_query_equals_date:
  - g_typed_query_equals_binary:
      TITLE    : equal
      NAMES    : [equal, equal, equal, equal, equal, equal, equal]
      SIGNATURE: |
                 Query& equal(bool value);
                 Query& equal(int64_t value);
                 Query& equal(float value);
                 Query& equal(double value);
                 Query& equal_date(Date value);
                 Query& equal(StringData value, bool case_sensitive=true);
                 Query& equal(BinaryData value);
      SUMMARY  : &g_typed_query_equals_summary
                 Equal to.
      DESCR    : &g_typed_query_equals_descr
                 Queries for column values equals to a certain value.
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData]
        DESCR  : &g_typed_query_value_descr
                 The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : &g_typed_query_case_sensitive_descr
                 'String match can be performed case sensitive or not. Default: <code>true</code>.'
      RETURN:
        TYPES  : Query&
        DESCR  : &g_typed_query_query_object_return_descr
                 The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_equals
        
  - g_typed_query_notEquals_bool:
  - g_typed_query_notEquals_int:
  - g_typed_query_notEquals_float:
  - g_typed_query_notEquals_double:
  - g_typed_query_notEquals_string:
  - g_typed_query_notEquals_date:
  - g_typed_query_notEquals_binary:
      NAMES    : [ not_equal, not_equal, not_equal, not_equal, 
                   not_equal, not_equal, not_equal ]
      SIGNATURE: |
                 Query& not_equal(bool value);
                 Query& not_equal(int64_t value);
                 Query& not_equal(float value);
                 Query& not_equal(double value);
                 Query& not_equal_date(Date value);
                 Query& not_equal(StringData value, bool case_sensitive=true);
                 Query& not_equal(BinaryData value);
      SUMMARY  : &g_typed_query_notEquals_summary
                 Not equal to.
      DESCR    : &g_typed_query_notEquals_descr
                 Queries for column values not equals to a certain value.
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData]
        DESCR  : *g_typed_query_value_descr
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : 'String match can be performed case sensitive or not. Default: <code>true</code>.'
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_notEquals
        
  - g_typed_query_greaterThan_int:
  - g_typed_query_greaterThan_float:
  - g_typed_query_greaterThan_double:
  - g_typed_query_greaterThan_date:
      NAMES    : [ greater, greater, greater, greater_date ]
      SIGNATURE: |
                 Query& greater(int64_t value);
                 Query& greater(float value);
                 Query& greater(double value);
                 Query& greater_date(Date value);
      SUMMARY  : &g_typed_query_greaterThan_summary
                 Greater than.
      DESCR    : &g_typed_query_greaterThan_descr
                 Queries for column values greater than a certain value.
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, Date]
        DESCR  : *g_typed_query_value_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_greaterThan
        
  - g_typed_query_greaterThanOrEqual_int:
  - g_typed_query_greaterThanOrEqual_float:
  - g_typed_query_greaterThanOrEqual_double:
  - g_typed_query_greaterThanOrEqual_date:
      NAMES    : [ greater_equal, greater_equal, greater_equal, greater_equal_date ]
      SIGNATURE: |
                 Query& greater_equal(int64_t value);
                 Query& greater_equal(float value);
                 Query& greater_equal(double value);
                 Query& greater_equal_date(Date value);
      SUMMARY  : &g_typed_query_greaterThanOrEqual_summary
                 Greater than or equal to.
      DESCR    : &g_typed_query_greaterThanOrEqual_descr
                 Queries for column values greater than or equal to a specified value.
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, Date]
        DESCR  : *g_typed_query_value_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_greaterThanOrEqual
        
  - g_typed_query_lessThan_int:
  - g_typed_query_lessThan_float:
  - g_typed_query_lessThan_double:
  - g_typed_query_lessThan_date:
      NAMES    : [less, less, less, less_date]
      SIGNATURE: |
                 Query& less(int64_t value);
                 Query& less(float value);
                 Query& less(double value);
                 Query& less_date(Date value);
      SUMMARY  : &g_typed_query_lessThan_summary
                 Less than.
      DESCR    : &g_typed_query_lessThan_descr
                 Queries for column values less than a specified value.
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, Date]
        DESCR  : *g_typed_query_value_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_lessThan
        
  - g_typed_query_lessThanOrEqual_int:
  - g_typed_query_lessThanOrEqual_float:
  - g_typed_query_lessThanOrEqual_double:
  - g_typed_query_lessThanOrEqual_date:
      NAMES    : [less_equal, less_equal, less_equal, less_equal_date]
      SIGNATURE: |
                 Query& less_equal(int64_t value);
                 Query& less_equal(float value);
                 Query& less_equal(double value);
                 Query& less_equal_date(Date value);
      SUMMARY  : &g_typed_query_lessThanOrEqual_summary
                 Less than or equal to.
      DESCR    : &g_typed_query_lessThanOrEqual_descr
                 Queries for column values less than or equal to a certain value.
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, Date]
        DESCR  : *g_typed_query_value_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_lessThanOrEqual

  - g_typed_query_between_int:
  - g_typed_query_between_float:
  - g_typed_query_between_double:
  - g_typed_query_between_date:
      NAMES    : [between, between, between, between_date]
      SIGNATURE: |
                 Query& between(int64_t from, int64_t to);
                 Query& between(float from, float to);
                 Query& between(double from, double to);
                 Query& between_date(Date from, Date to);
      DESCR    : &g_typed_query_between_descr
                 Queries for column values in ranges.
      SUMMARY  : &g_typed_query_between_summary
                 Belongs to an interval.
      PARAMS:
      - NAME   : from
        TYPES  : [int64_t, float, double, Date]
        DESCR  : &g_typed_query_between_parm1_descr
                 Lower bound of range.
      - NAME   : to
        TYPES  : [int64_t, Date]
        DESCR  : &g_typed_query_between_parm2_descr
                 Upper bound of range.
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_between
        
  - g_typed_query_startsWith_string:
  - g_typed_query_startsWith_binary:
      NAMES    : [begins_with, begins_with]
      SIGNATURE: |
                 Query& begins_with(StringData value, bool case_sensitive=true);
                 Query& begins_with(BinaryData value);
      DESCR    : &g_typed_query_startsWith_descr
                 Queries for column values which begin with a certain prefix.
      SUMMARY  : &g_typed_query_startsWith_summary
                 Substring match at the begining of the attribute.
      PARAMS:
      - NAME   : value
        TYPES  : [StringData, BinaryData]
        DESCR  : *g_typed_query_value_descr
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_typed_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_startsWith
        
  - g_typed_query_endsWith_string:
  - g_typed_query_endsWith_binary:
      NAMES    : [ends_with, ends_with]
      SIGNATURE: |
                 Query& ends_with(StringData value, bool case_sensitive=true);
                 Query& ends_with(BinaryData value);
      DESCR    : &g_typed_query_endsWith_descr
                 Queries for column values which end with a certain suffix.
      SUMMARY  : &g_typed_query_endsWith_summary
                 Substring match at the end at the attribute.
      PARAMS:
      - NAME   : value
        TYPES  : [StringData, BinaryData]
        DESCR  : *g_typed_query_value_descr
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_typed_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_endsWith
        
  - g_typed_query_contains_string:
  - g_typed_query_contains_binary:
      NAMES    : [contains, contains]
      SIGNATURE: |
                 Query& contains(StringData value, bool case_sensitive=true);
                 Query& contains(BinaryData value);
      DESCR    : &g_typed_query_contains_descr
                 Queries for column values which contain a certian substring.
      SUMMARY  : &g_typed_query_contains_summary
                 Substring search.
      PARAMS:
      - NAME   : value
        TYPES  : [StringData, BinaryData]
        DESCR  : *g_typed_query_value_descr
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_typed_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_contains
        
        
- Combiners:
  METHODS:
  - g_typed_query_group:
      NAME     : group
      DESCR    : &g_typed_query_group_descr
                 >
                 Group conditions ("left" parenthesis). Group of conditions can be nested and they are
                 conceptually a parenthesis.
      SUMMARY  : &g_typed_query_group_summary
                 Start group ("left parenthesis").
      RETURN:
        TYPES  : Query
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_group
  - g_typed_query_endGroup:
      NAME     : end_group
      DESCR    : &g_typed_query_endGroup_descr
                 Group conditions ("right" parenthesis).
      SUMMARY  : &g_typed_query_endGroup_summary
                 Stop group ("right parenthesis").
      RETURN:
        TYPES  : Query
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_group
  - g_typed_query_or:
      NAME     : Or
      DESCR    : &g_typed_query_or_descr
                 Two conditions will be folded by logical-or.
      SUMMARY  : &g_typed_query_or_summary
                 Logical-or.
      RETURN:
        TYPES  : Query
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_or
  - g_typed_query_subtable:
      NAME     : subtable
      DESCR    : &g_typed_query_subtable_descr
                 Query a subtable.
      SUMMARY  : &g_typed_query_subtable_summary
                 Query a subtable.
      RETURN:
        TYPES  : Query
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_subtable
  - g_typed_query_endSubtable:
      NAME     : end_subtable
      DESCR    : &g_typed_query_endSubtable_descr
                 End of subtable query.
      SUMMARY  : &g_typed_query_endSubtable_summary
                 End of subtable query.
      RETURN:
        TYPES  : Query
        DESCR  : *g_typed_query_query_object_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_subtable
        
        
- Actions:
  METHODS:
  - g_typed_query_find_all_const:
  - g_typed_query_find_all:
      NAMES    : [find_all, find_all]
      DESCR    : &g_typed_query_find_all_descr
                 Execute a query. See the {@link class_dyn_tableview} class for further details.
      SUMMARY  : &g_typed_query_find_all_summary
                 Execute query.
      SIGNATURE: |
                 TableView      find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
                 ConstTableView find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
      PARAMS:
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [TableView, ConstTableView]
        DESCR  : &g_typed_query_find_all_return1_descr
                 The TableView object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_findall
  - g_typed_query_find_next:
      NAME     : find_next
      DESCR    : &g_typed_query_find_next_descr
                 Find next row.
      SUMMARY  : &g_typed_query_find_next_summary
                 Find next row.
      PARAMS:
      - NAME   : lastmatch
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : Row number
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_find_next
        
  - g_typed_query_sum:
  - g_typed_query_sum_float:
  - g_typed_query_sum_double:
      NAMES    : [sum, sum_float, sum_double]
      DESCR    : &g_typed_query_sum_descr
                 This method calculates the sum.
      SUMMARY  : &g_typed_query_sum_summary
                 Calculate sum.
      CONST    : true
      SIGNATURE: |
                 int64_t sum(size_t column_ndx, size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double sum_float(size_t column_ndx, size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double sum_double(size_t column_ndx, size_t* resultcount, size_t start, size_t end, size_t limit) const;
      PARAMS:
      - NAME   : resultcount
        DESCR  : &g_typed_query_number_of_rows_descr
                 The number of rows to consider.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The sum.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_sum
  - g_typed_query_size:
      NAME     : count
      DESCR    : &g_typed_query_size_descr
                 Find the number of matching rows.
      SUMMARY  : &g_typed_query_size_summary
                 Number of matching rows.
      CONST    : true
      PARAMS:
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : &g_typed_query_size_return1_descr
                 The number of rows.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_size
  
#TODO  - g_typed_query_maximum_date:
  - g_typed_query_maximum:
  - g_typed_query_maximum_float:
  - g_typed_query_maximum_double:
      NAMES    : [maximum, maximum_float, maximum_double]
      DESCR    : &g_typed_query_maximum_descr
                 This method finds the highest value.
      SUMMARY  : &g_typed_query_maximum_summary
                 Highest value.
      CONST    : true
      SIGNATURE: |
                 int64_t maximum(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 float   maximum_float(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double  maximum_double(size_t* resultcount, size_t start, size_t end, size_t limit) const;
      PARAMS:
      - NAME   : resultcount
        DESCR  : *g_typed_query_number_of_rows_descr
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_typed_query_maximum_return1_descr
                 The highest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_maximum

  - g_typed_query_minimum:
  - g_typed_query_minimum_float:
  - g_typed_query_minimum_double:
      NAMES    : [minimum, minimum_float, minimum_double]
      DESCR    : &g_typed_query_minimum_descr
                 This method finds the lowest value.
      SUMMARY  : &g_typed_query_minimum_summary
                 Lowest value.
      CONST    : true
      SIGNATURE: |
                 int64_t minimum(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 float   minimum_float(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double  minimum_double(size_t* resultcount, size_t start, size_t end, size_t limit) const;
      PARAMS:
      - NAME   : resultcount
        DESCR  : *g_typed_query_number_of_rows_descr
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_typed_query_minimum_return1_descr
                 The lowest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_manimum
        
  - g_typed_query_average:
  - g_typed_query_average_float:
  - g_typed_query_average_double:
      NAMES    : [average, average_float, average_double]
      SUMMARY  : &g_typed_query_average_summary
                 Calcualtes the average.
      DESCR    : &g_typed_query_average_descr
                 This method calcualtes the average.
      CONST    : true
      SIGNATURE: |
                 double  average(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double  average_float(size_t* resultcount, size_t start, size_t end, size_t limit) const;
                 double  average_double(size_t* resultcount, size_t start, size_t end, size_t limit) const;
      PARAMS:
      - NAME   : resultcount
        DESCR  : *g_typed_query_number_of_rows_descr
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : double
        DESCR  : &g_typed_query_average_return1_descr
                 The average.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_average
        
  - g_typed_query_remove:
      NAME     : remove
      DESCR    : &g_typed_query_remove_descr
                 This method will remove all matching rows in the source table.
      SUMMARY  : &g_typed_query_remove_summary
                 Remove rows.
      CONST    : true
      PARAMS:
      - NAME   : resultcount
        DESCR  : *g_typed_query_number_of_rows_descr
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : &g_typed_query_remove_return1_descr
                 The number of rows removed.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_query_remove
