#
# C++ reference documentation for the SharedGroup class.
#

ID         : class_shared_group
TITLE      : SharedGroup
SUMMARY    : &g_shared_group_summary
             Sharing groups between processes.
DESCR      : &g_shared_group_descr
             >
             Database files can be shared between running applications.

             When two threads or processes want to access the same
             database file, they must each create their own
             instance of SharedGroup.

             If the database file does not already exist, it will
             be created. When multiple threads are involved, it is
             safe to let the first thread, that gets to it, create
             the file.

             While at least one instance of SharedGroup exists for
             a specific database file, a lock file will exist
             too. The lock file will be placed in the same
             directory as the database file, and its name is
             derived by adding the suffix '.lock' to the name of
             the database file.

             Processes that share a database file must reside on
             the same host.

             Moreover, the class also provides a transactional
             interface to TightDB. Transactions are divided into
             read and write transactions. While read transactions
             do not modify the table and thereby the group, write
             transactions do. This division is important to remember
             as derived objects (tables, views, etc.) are either
             writable or not.
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_sharedgroup_intro
IGNORE     : []
CATEGORIES:
- Constructor:
  METHODS:
  - g_shared_group_constructor:
      NAMES    : SharedGroup
      SUMMARY  : &g_shared_group_constructor_summary
                 Create a shared group.
      DESCR    :
      - TEXT   : &g_shared_group_constructor_descr
                 >
                 Open a shared group (will be created if it does not already exist).

                 By default the shared group will be fully durable, so that
                 each commit writes its changes to disk in an atomic manner
                 that guarantees that the file is always consistent.
                 The transaction will complete when the write has been done 
                 to disk (depending on your disk, it might return when the 
                 disk has received the data to it's cache).

                 You can also set the durability level to Asynchroneous.
                 This means that the actual write to disk can occur with a delay.
                 This provides much higher write performance, compared to full
                 durability. The transactions are still done atomically.
                 (Note: this mode is currently not implemented on Windows versions
                 of TightDB).

                 If your data is transient, and does not need to persist to disk
                 (like for caching or shared state between processes). You can
                 open the shared group in memory-only mode. Then the file will 
                 just be used for identification and backing; it will be removed
                 when there are no more processes using it.

                 Note that a shared group can only be opened in the mode it was 
                 created in.

      - TEXT   : &g_shared_group_constructor_descr_unattached
                 >
                 A SharedGroup may also be constructed in an unattached
                 state (2). See {@link g_shared_group_open} and
                 {@link g_shared_group_is_attached} for more on this.
      ENUM_SIG :
      - SIG    : >
                 SharedGroup(const std::string& path, bool no_create = false,
                             DurabilityLevel dlevel = durability_Full);
      - SIG    : SharedGroup(unattached_tag);
      PARAMS:
      - NAME   : path
        TYPES  : const std::string&
        DESCR  : *g_open_filesystem_path_descr
      - NAME   : no_create
        TYPES  : bool
        DESCR  : &g_shared_group_constructor_parm2_descr
                 If set to <tt>true</tt>, File::NotFound will be thrown
                 if the file does not already exist.
      - NAME   : dlevel
        TYPES  : DurabilityLevel
        DESCR  : &g_shared_group_constructor_parm3_descr
                 Durability Level (durability_Full, durability_MemOnly,
                 durability_Async).
      RETURN:
        TYPES  : SharedGroup
        DESCR  : &g_shared_group_constructor_return1_descr
                 A shared group.
      THROWS:
      - EXCEPT : &cpp_permission_denied_except
                 File::PermissionDenied
        DESCR  : &g_permission_denied_descr
                 >
                 The user has insufficient permissions to perform the IO
                 operation.
      - EXCEPT : &cpp_not_found_except
                 File::NotFound
        DESCR  : &g_not_found_descr
                 A part of the path was not found.
      - EXCEPT : &cpp_invalid_database_except
                 InvalidDatabase
        DESCR  : &g_shared_group_invalid_database_descr
                 The file does not appear to contain a valid TightDB database.
      - EXCEPT : &cpp_access_error_except
                 File::AccessError
        DESCR  : &g_access_error_descr
                 For some reason, we can't access the database.
      - EXCEPT : &cpp_runtime_error_except
                 std::runtime_error
        DESCR  : &g_runtime_error_descr
                 A serious error occurred.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_constructor
        DESCR  :

- Write transactions:
  METHODS:
  - g_shared_group_begin_write:
      NAMES    : begin_write
      SUMMARY  : &g_shared_group_begin_write_summary
                 Initiate a transaction.
      DESCR    : &g_shared_group_begin_write_descr
                 Begin writing to a shared group.
      RETURN:
        TYPES  : Group&
        DESCR  : &g_shared_group_begin_write_return1_descr
                 A group.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_begin_write
        DESCR  :

  - g_shared_group_commit:
      NAMES    : commit
      SUMMARY  : &g_shared_group_commit_summary
                 Commit a transaction.
      DESCR    : &g_shared_group_commit_descr
                 This method closes a transaction and all changes are written to the shared group.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_commit
        DESCR  :

  - g_shared_group_rollback:
      NAMES    : rollback
      SUMMARY  : &g_shared_group_rollback_summary
                 Rollback a transaction.
      DESCR    : &g_shared_group_rollback_descr
                 This method closes a transaction and discards all changes done to the shared group,
                 unless a commit has already been done. It is ok to call rollback multiple times. 
                 Any additional calls to rollback following a commit or rollback are treated as no-ops.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_rollback
        DESCR  :

- Read transactions:
  METHODS:
  - g_shared_group_begin_read:
      NAMES    : begin_read
      SUMMARY  : &g_shared_group_begin_read_summary
                 Initiate read transaction.
      DESCR    : &g_shared_group_begin_read_descr
                 >
                 Begin reading from a shared group. During the read transaction,
                 you have a fully consistent immutable view of the group.
                 You must call {@link g_shared_group_end_read} to terminate the transaction.
      CONST    : True
      RETURN:
        TYPES  : Group&
        DESCR  : A group.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_begin_read
        DESCR  :

  - g_shared_group_end_read:
      NAMES    : end_read
      SUMMARY  : &g_shared_group_end_read_summary
                 Terminate read transaction.
      DESCR    : &g_shared_group_end_read_descr
                 This method terminates a read transaction which was started with {@link g_shared_group_begin_read}.
                 It is ok to call end_read multiple times, the first call will terminate the transaction.
                 Any additional calls are treated as no-ops.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_end_read
        DESCR  :


- Utilities:
  METHODS:
  - g_shared_group_open:
      NAMES    : open
      SUMMARY  : &g_shared_group_open_summary
                 Attach this SharedGroup to a file.
      SIGNATURE: >
                 open(const std::string& file, bool no_create = false, DurabilityLevel dlevel = durability_Full)
      DESCR    : &g_shared_group_open_descr
                 Attach this SharedGroup instance to the specified
                 database file.

                 If the database file does not already exist, it will
                 be created (unless <tt>no_create</tt> is set to
                 true.) When multiple threads are involved, it is safe
                 to let the first thread, that gets to it, create the
                 file.

                 While at least one instance of SharedGroup exists for
                 a specific database file, a "lock" file will be
                 present too. The lock file will be placed in the same
                 directory as the database file, and its name will be
                 derived by appending ".lock" to the name of the
                 database file.

                 When multiple SharedGroup instances refer to the same
                 file, they must specify the same durability level,
                 otherwise an exception will be thrown.

                 Calling open() on a SharedGroup instance that is
                 already in the attached state has undefined behavior.
      PARAMS:
      - NAME   : path
        TYPES  : const std::string&
        DESCR  : *g_open_filesystem_path_descr
      - NAME   : no_create
        TYPES  : bool
        DESCR  : &g_shared_group_open_parm2_descr
                 If set to <tt>true</tt>, File::NotFound will be thrown
                 if the file does not already exist.
      - NAME   : dlevel
        TYPES  : DurabilityLevel
        DESCR  : &g_shared_group_open_parm3_descr
                 Durability Level (durability_Full or durability_MemOnly).
      THROWS:
      - EXCEPT : File::AccessError
        DESCR  : &g_shared_group_open_throws_descr
                 If the file could not be opened. If the reason
                 corresponds to one of the exception types that are
                 derived from File::AccessError, the derived exception
                 type is thrown. Note that InvalidDatabase is among
                 these derived exception types.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_shared_group_open

  - g_shared_group_is_attached:
      NAMES    : is_attached
      SUMMARY  : &g_shared_group_is_attached_summary
                 Is this SharedGroup instance in its attached state?
      DESCR    : &g_shared_group_is_attached_descr
                 A shared group may be created in the unattached
                 state, and then later attached to a file with a call
                 to one of the open() methods. Calling any method
                 other than open(), is_attached(), and ~SharedGroup()
                 on an unattached instance results in undefined
                 behavior.
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if attached, <code>false</code> otherwise.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_shared_group_is_attached

  - g_shared_group_reserve:
      NAMES    : reserve
      SUMMARY  : &g_shared_group_reserve_summary
                 Reserve disk space.
      DESCR    : &g_shared_group_reserve_descr
                 Reserve disk space now to avoid allocation errors at
                 a later point in time, and to minimize on-disk
                 fragmentation. In some cases, less fragmentation
                 translates into improved performance.

                 When supported by the system, a call to this function
                 will make the database file at least as big as the
                 specified size, and cause space on the target device
                 to be allocated (note that on many systems on-disk
                 allocation is done lazily by default). If the file is
                 already bigger than the specified size, the size will
                 be unchanged, and on-disk allocation will occur only
                 for the initial section that corresponds to the
                 specified size. On systems that do not support
                 preallocation, this function has no effect. To know
                 whether preallocation is supported by TightDB on your
                 platform, call File::is_prealloc_supported().

                 It is an error to call this function on an unattached
                 shared group. Doing so will result in undefined
                 behavior.
      PARAMS:
      - NAME   : size_in_bytes
        TYPES  : std::size_t
        DESCR  : &g_shared_group_reserve_parm1
                 The total number of bytes to reserve on disk for this database.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_shared_group_reserve

  - g_shared_group_has_changed:
      NAMES    : has_changed
      SUMMARY  : &g_shared_group_has_changed_summary
                 Has shared group been changed since last transaction?
      DESCR    : &g_shared_group_has_changed_descr
                 >
                 This method tests if the shared group has been modified (by another process),
                 since the last transaction.

                 It has very little overhead and does not affect other processes, so it is
                 ok to call it at regular intervals (like in the idle handler of an application).
      RETURN:
        TYPES  : bool
        DESCR  : &g_shared_group_has_changed_return
                 <code>true</code> if it has changed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_has_changed
        DESCR  :
