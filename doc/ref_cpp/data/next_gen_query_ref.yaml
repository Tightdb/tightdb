#
# C++ reference documentation for the Next-generation syntax.
#

# TODO: Move to two seperate sections in Query (typed) and Query (dynamic)

ID         : class_next_gen_query
TITLE      : Query Expressions
SUMMARY    : New experimental query expression interface.
DESCR      : >
            <p>This particular feature is <b>experimental</b> and must be considered unstable.<p>
            <p>The New Query expression syntax lets you write expressions like:</p>
            <tt>&nbsp;&nbsp;&nbsp;Query q = books.column().pages >= 200 && books.column().author == "Griffiths";
            <br>
            &nbsp;&nbsp;&nbsp;size_t match = q.find();
            </tt>
            
            <p>If books is a <em>dynamic </em>table you need to specify column types as template arguments and 
            give their column number in parentheses:</p>
            
            <tt>&nbsp;&nbsp;&nbsp;Query q = books.column&lt;Int&gt;(0).pages &gt;= 200 && books.column&lt;String&gt;(1).author == "Griffiths";
            <br>&nbsp;&nbsp;&nbsp;size_t match = q.find();         
            </tt>
            <p>Queries can only perform simple searches on a single table - all 
            columns must belong to the same table and joins or self joins are not supported. </p>
            <div>
            <table class="table table-bordered" border="1">
            <thead><tr><td colspan="2"><h3>Relevant classes</h3>
            </td>
            </tr>
            </thead>
            <tbody>
            <tr><td>{@link class_dyn_query}
            </td>
            <td>Returned by compare operators, logical operators and parantheses. 
            You can perform methods like <code>find()</code>, <code>find_all()</code>, <code>maximum*()</code>, etc, 
            on it.</td>
            </tr>
            <tr><td valign="top"><tt>
            
            Columns&lt;<em>T</em>&gt;</tt></td>
            <td>Returned by <code>table.column().<em>name</em>
            </a></code> for typed tables and <code>table.column&lt;T&gt;(<em>column 
            number</em>)</code> for untyped tables. <br />
            <br />
            You can declare freestanding column objects from both typed and untyped 
            tables. Specify the type T that matches the column type:<br />
            <br />
            <tt>&nbsp;&nbsp;&nbsp;Columns&lt;Int&gt; pages = typed.column().pages;<br />
            &nbsp;&nbsp;&nbsp;Columns&lt;String&gt; author = untyped.column&lt;String&gt;(2);<br />
            </tt><br />
            These free standing column objects have no methods 
            available and are only meant to be used as shorthand references in queries.
            See the examples at the end of this page.</td>
            </tr>
            </tbody>
            </table>
            </div>
            <div>
            <table class="table table-bordered" border="1">
            <thead><tr><td colspan="6"><h3>Column types</h3>
            </td>
            </tr>
            </thead>
            <tbody>
            <tr>
            <td colspan="6">Not all column types are currently 
            supported. Supported types are:</td>
            </tr>
            <tr><td>Int</td>
            <td>Bool</td>
            <td>String</td>
            <td>Float</td>
            <td>Double</td>
            <td>Date</td>
            </tr>
            </tbody>
            </table>
            <table class="table table-bordered" border="1">
            <thead><tr><td><h3>Compare operator</h3>
            </td>
            <td>
            <h3>Return type</h3>
            </td>
            <td>
            <h3>Remarks</h3>
            </td>
            </tr>
            </thead>
            <tbody>
            <tr>
            <td>==</td>
            <td>Query</td>
            <td>&nbsp;</td>
            </tr>
            <tr>
            <td>!=</td>
            <td>Query</td>
            <td>&nbsp;</td>
            </tr>
            <tr>
            <td>&gt;</td>
            <td>Query</td>
            <td>Strings not supported</td>
            </tr>
            <tr>
            <td>&lt;</td>
            <td>Query</span></td>
            <td>Strings not supported</td>
            </tr>
            <tr>
            <td>&gt;=</td>
            <td>Query</td>
            <td>Strings not supported</td>
            </tr>
            <tr><td>&lt;=</td>
            <td>Query</td>
            <td>Strings not supported</td>
            </tr>
            </tbody>
            </table>
            <table class="table table-bordered" border="1">
            <thead><tr><td colspan="4"><h3>Arithmetic operators</h3>
            </td>
            </tr>
            </thead>
            <tbody>
            <tr>
            <td colspan="4">Arithmetic operators only apply to 
            columns of type Int, Float and Double. Currently four operators are 
            available (more will be introduced in future releases):</td>
            </tr>
            <tr><td>+ (plus)</td>
            <td>- (minus)</td>
            <td>* (multiply)</td>
            <td>/ (division)</td>
            </tr>
            </tbody>
            </table>

            <table class="table table-bordered" border="1" style="width: 100%">
            <thead><tr>
            <td style="width: 285px">
            <h3>Logical operators and parantheses</h3>
            </td>
            <td>
            <h3><strong>Return type</strong></h3>
            </td>
            </tr>
            </thead>
            <tr>
            <td style="width: 285px">Query || Query</td>
            <td>Query</td>
            </tr>
            <tr>
            <td style="width: 285px">Query &amp;&amp; Query</td>
            <td>Query</td>
            </tr>
            <tr>
            <td style="width: 285px">(Query)</td>
            <td>Query</td>
            </tr>
            </table>

            <h3>Type conversion/promotion</h3>

            <p>If the operands of a compare or arithmetic operator 
            are of different types, then conversion/promotion mimicks that of the C++ 
            standard. Take following example:</p>

            <tt>&nbsp;&nbsp;&nbsp;table.columns().float_column + 123 > table.columns().double_column;</tt>

            <p>This behaves similar to type casting as follows:</p>

            <tt>&nbsp;&nbsp;&nbsp;double(table.columns().float_column + float(123)) > table.columns().double_column;</tt>

            <p>As for regular C++ expressions, be aware of caveats. For example 
            <tt>float(100000005) == 100000008</tt> because there is a gap between
            values which can be represented by a float. This can lead to errorneous
            arithmetic and comparisons.</p>
EXAMPLES:
- CODE     : ex_cpp_ng_query_typed
  DESCR    : Typed table.
- CODE     : ex_cpp_ng_query_untyped
  DESCR    : Dynamic table.
CATEGORIES:
- None:
  METHODS:
  #-------------------------------
  - g_method_will_be_made_later:
      TODO     : later
