#
# C++ reference documentation for the TableView (dynamic) class.
#

ID         : class_dyn_tableview
TITLE      : TableView (dynamic)
SUMMARY    : &g_dyn_view_intro_summary
             The TableView class.
DESCR      : &g_dyn_view_intro_descr
             >
             Queries and searches can return <code>TableView</code>
             objects, which works as virtual tables containing just
             the matched rows. You can interact with a
             <code>TableView</code> just as a regular table.

             A {@link class_dyn_tableview} is implicitely linked to a
             {@link class_dyn_table}.  All changes to the view will
             propagate to the original table. This includes operations
             like updating values and deleting rows.

             To some degree this also applies in the opposite direction.
             Updates to values in the table will be visible through views
             linked to the table, while deletion and insertions of rows in
             a table cause any views linked to the table to become detached.
             Access to detached views are undefined, except for the is_attached() method.

             It is possible to create multiple views for one table. Updates to one
             view propagates to the original table and is visible from other
             views linked to the same table. Deletion of rows through a view
             propagates to the original table and cause any other views
             linked to the same table to become detached.

             NOTICE:
             For all methods which takes row and column index as parameters,
             you must ensure that these are in a valid range.
             You must also ensure that you use the correct type of method for
             the correct type of column. I.e. it's invalid to use 'getString(...)'
             with a column index which is of Boolean type - it must be of 'String'
             type and so forth.

SEE        :
EXAMPLES   :
- DESCR:
  CODE: ex_cpp_dyn_view_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES :
- State:
  METHODS:
  - g_dyn_view_size:
      NAME     : size
      SUMMARY  : *g_typed_view_size_summary
      DESCR    : *g_typed_view_size_descr
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_view_size_number_of_rows_return
                 The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_size
        DESCR  :
  - g_dyn_view_is_empty:
      NAME     : is_empty
      SUMMARY  : &g_dyn_view_is_empty_summary
                 Is view empty?
      DESCR    : &g_dyn_view_is_empty_descr
                 The method checks if the view is empty that is, it has zero rows.
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_is_empty
        DESCR  :
  - g_dyn_view_is_attached:
      NAME     : is_attached
      SUMMARY  : &g_dyn_view_is_attached_summary
                 Is view attached?
      DESCR    : &g_dyn_view_is_attached_descr
                 The method checks if the view is attached. A view becomes detached
                 if rows are added to or removed from the table it originates from.
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_is_attached
        DESCR  :
- View:
  METHODS:
  - g_dyn_view_clear:
      NAME     : clear
      SUMMARY  : *g_dyn_table_clear_summary
      DESCR    : &g_dyn_view_clear_descr
                 >
                 This method will remove all rows in a view. This implies that
                 the rows in the originating table will be removed.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_clear
        DESCR  :
- Columns:
  METHODS:
  - g_dyn_view_get_column_count:
      NAME     : get_column_count
      SUMMARY  : *g_dyn_table_get_column_count_summary
      DESCR    : *g_dyn_table_get_column_count_descr
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_view_get_column_count_return1_descr
                 The number of columns.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_column_count
        DESCR  :
  - g_dyn_view_get_column_name:
      NAME     : get_column_name
      SUMMARY  : *g_dyn_table_get_column_name_summary
      DESCR    : *g_dyn_table_get_column_name_descr
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_view_column_index_descr
                 The column index.
      RETURN:
        TYPES  : StringData
        DESCR  : &g_dyn_view_column_name_descr
                 The column name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_column_name
        DESCR  :
  - g_dyn_view_get_column_index:
      NAME     : get_column_index
      SUMMARY  : *g_dyn_table_get_column_index_summary
      DESCR    : *g_dyn_table_get_column_index_descr
      CONST    : True
      PARAMS:
      - NAME   : column_name
        TYPES  : StringData
        DESCR  : *g_dyn_view_column_name_descr
      RETURN:
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_column_index
        DESCR  :
  - g_dyn_view_get_column_type:
      NAME     : get_column_type
      SUMMARY  : *g_dyn_table_get_column_type_summary
      DESCR    :
      - TEXT   : *g_dyn_table_get_column_type_descr1
        TEXT   : *g_dyn_table_get_column_type_descr2
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      RETURN:
        TYPES  : DataType
        DESCR  : &g_dyn_view_get_column_type_return1_descr
                 The column type.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_column_type
        DESCR  :
- Rows:
  METHODS:
  - g_dyn_view_get_source_ndx:
      NAME     : get_source_ndx
      SUMMARY  : &g_dyn_view_get_source_ndx_summary
                 Get source index.
      DESCR    : &g_dyn_view_get_source_ndx_descr
                 This method will get the index of the row in the source table.
      CONST    : True
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_view_get_source_ndx_parm1_descr
                 The row index in the view.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_view_get_source_ndx_return1_descr
                 The row index in the table.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_source_ndx
        DESCR  :

  - g_dyn_view_remove_row:
      NAME     : remove
      SUMMARY  : *g_dyn_table_remove_row_summary
      DESCR    : *g_dyn_table_remove_row_descr
      SIGNATURE: void remove(size_t row_ndx);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_view_remove_row_parm1_descr
                 Position of row to delete.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove
        DESCR  :

  - g_dyn_view_remove_last_row:
      NAME     : remove_last
      SUMMARY  : *g_dyn_table_remove_last_row_summary
      DESCR    : *g_dyn_table_remove_last_row_descr
      SIGNATURE: void remove_last();
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove_last_row
        DESCR  :


- Values:
  METHODS:
  - g_dyn_view_get_bool:
      NAME     : get_bool
  - g_dyn_view_get_int:
      NAME     : get_int
  - g_dyn_view_get_float:
      NAME     : get_float
  - g_dyn_view_get_double:
      NAME     : get_double
  - g_dyn_view_get_date:
      NAME     : get_date
  - g_dyn_view_get_string:
      NAME     : get_string
  - g_dyn_view_get_binary:
      NAME     : get_binary
  - g_dyn_view_get_mixed:
      NAME     : get_mixed
  - g_dyn_view_get_mixed_type:
      NAME     : get_mixed_type
  - g_dyn_view_get_subtable:
      NAME     : get_subtable
  - g_dyn_view_get_subtable_const:
      NAME     : get_subtable
      TITLE    : get_*
      SUMMARY  : *g_dyn_table_get_xxx_summary
      DESCR    : *g_dyn_table_get_xxx_descr
      SIGNATURE: |
                 bool          get_bool(size_t column_ndx, size_t row_ndx) const;
                 int64_t       get_int(size_t column_ndx, size_t row_ndx) const;
                 float         get_float(size_t column_ndx, size_t row_ndx) const;
                 double        get_double(size_t column_ndx, size_t row_ndx) const;
                 DateTime      get_datetime(size_t column_ndx, size_t row_ndx) const;
                 StringData    get_string(size_t column_ndx, size_t row_ndx) const;
                 BinaryData    get_binary(size_t column_ndx, size_t row_ndx) const;
                 Mixed         get_mixed(size_t column_ndx, size_t row_ndx) const;
                 DataType      get_mixed_type(size_t column_ndx, size_t row_ndx) const
                 TableRef      get_subtable(size_t column_ndx, size_t row_ndx);
                 ConstTableRef get_subtable(size_t column_ndx, size_t row_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_view_row_index_descr
                 The row index.
      RETURN:
        TYPES  : [bool, int64_t, float, double, DateTime, StringData, BinaryData, Mixed, DataType, TableRef, ConstTableRef]
        DESCR  : &g_dyn_view_value_return_descr
                 The value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_xxx
        DESCR  :
  - g_dyn_view_set_bool:
      NAME     : set_bool
  - g_dyn_view_set_int:
      NAME     : set_int
  - g_dyn_view_set_float:
      NAME     : set_float
  - g_dyn_view_set_double:
      NAME     : set_double
  - g_dyn_view_set_enum:
      NAME     : set_enum
  - g_dyn_view_set_date:
      NAME     : set_date
  - g_dyn_view_set_string:
      NAME     : set_string
  - g_dyn_view_set_binary:
      NAME     : set_binary
  - g_dyn_view_set_mixed:
      NAME     : set_mixed
      TITLE    : set_*
      SUMMARY  : *g_dyn_table_set_xxx_summary
      DESCR    : *g_dyn_table_set_xxx_descr
      SIGNATURE: |
                 void set_bool(size_t column_ndx, size_t row_ndx, bool value);
                 void set_int(size_t column_ndx, size_t row_ndx, int64_t value);
                 void set_float(size_t column_ndx, size_t row_ndx, float value);
                 void set_double(size_t column_ndx, size_t row_ndx, double value);
                 template<class E> void set_enum(size_t column_ndx, size_t row_ndx, E value);
                 void set_datetime(size_t column_ndx, size_t row_ndx, DateTime value);
                 void set_string(size_t column_ndx, size_t row_ndx, StringData value);
                 void set_binary(size_t column_ndx, size_t row_ndx, BinaryData value);
                 void set_mixed(size_t column_ndx, size_t row_ndx, Mixed value);
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_row_index_descr
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, DateTime, StringData, BinaryData, Mixed]
        DESCR  : *g_dyn_view_value_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_set_xxx
        DESCR  :

- Sub-tables:
  METHODS:
  - g_dyn_view_get_subtable_size:
      NAME     : get_subtable_size
      SUMMARY  : *g_dyn_table_get_subtable_size_summary
      DESCR    : *g_dyn_table_get_subtable_size_descr
      CONST    : true
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_row_index_descr
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_view_get_subtable_size_parm1_descr
                 Number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_get_subtable
        DESCR  :
  - g_dyn_view_clear_subtable:
      NAME     : clear_subtable
      SUMMARY  : *g_dyn_table_clear_subtable_summary
      DESCR    : *g_dyn_table_clear_subtable_descr
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_row_index_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_clear_subtable
        DESCR  :


- Searching:
  METHODS:
  - g_dyn_view_find_first_bool:
      NAME     : find_first_bool
  - g_dyn_view_find_first_int:
      NAME     : find_first_int
  - g_dyn_view_find_first_float:
      NAME     : find_first_float
  - g_dyn_view_find_first_double:
      NAME     : find_first_double
  - g_dyn_view_find_first_date:
      NAME     : find_first_date
  - g_dyn_view_find_first_string:
      NAME     : find_first_string
  - g_dyn_view_find_first_binary:
      NAME     : find_first_binary
      TITLE    : find_first_*
      SUMMARY  : *g_dyn_table_find_first_xxx_summary
      DESCR    : *g_dyn_table_find_first_xxx_descr
      SIGNATURE: |
                 size_t find_first_bool(size_t column_ndx, bool value) const;
                 size_t find_first_int(size_t column_ndx, int64_t value) const;
                 size_t find_first_float(size_t column_ndx, float value) const;
                 size_t find_first_double(size_t column_ndx, double value) const;
                 size_t find_first_datetime(size_t column_ndx, DateTime value) const;
                 size_t find_first_string(size_t column_ndx, StringData value) const;
                 size_t find_first_binary(size_t column_ndx, BinaryData value) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, DateTime, StringData, BinaryData]
        DESCR  : *g_dyn_view_value_return_descr
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>realm::not_found</code> (equal to <code>std::size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_find_first_xxx
        DESCR  :

  - g_dyn_view_find_all_bool:
      NAME     : find_all_bool
  - g_dyn_view_find_all_int:
      NAME     : find_all_int
  - g_dyn_view_find_all_float:
      NAME     : find_all_float
  - g_dyn_view_find_all_double:
      NAME     : find_all_double
  - g_dyn_view_find_all_date:
      NAME     : find_all_date
  - g_dyn_view_find_all_string:
      NAME     : find_all_string
  - g_dyn_view_find_all_binary:
      NAME     : find_all_binary
  - g_dyn_view_find_all_bool_const:
      NAME     : find_all_bool
  - g_dyn_view_find_all_int_const:
      NAME     : find_all_int
  - g_dyn_view_find_all_float_const:
      NAME     : find_all_float
  - g_dyn_view_find_all_double_const:
      NAME     : find_all_double
  - g_dyn_view_find_all_date_const:
      NAME     : find_all_date
  - g_dyn_view_find_all_string_const:
      NAME     : find_all_string
  - g_dyn_view_find_all_binary_const:
      NAME     : find_all_binary
      TITLE    : find_all_*
      SUMMARY  : *g_dyn_table_find_all_xxx_summary
      DESCR    : *g_dyn_table_find_all_xxx_descr
      SIGNATURE: |
                 TableView      find_all_bool(size_t column_ndx, bool value);
                 TableView      find_all_int(size_t column_ndx, int64_t value);
                 TableView      find_all_float(size_t column_ndx, float value);
                 TableView      find_all_double(size_t column_ndx, double value);
                 TableView      find_all_datetime(size_t column_ndx, DateTime value);
                 TableView      find_all_string(size_t column_ndx, StringData value);
                 TableView      find_all_binary(size_t column_ndx, BinaryData value);

                 ConstTableView find_all_bool(size_t column_ndx, bool value) const;
                 ConstTableView find_all_int(size_t column_ndx, int64_t value) const;
                 ConstTableView find_all_float(size_t column_ndx, float value) const;
                 ConstTableView find_all_double(size_t column_ndx, double value) const;
                 ConstTableView find_all_datetime(size_t column_ndx, DateTime value) const;
                 ConstTableView find_all_string(size_t column_ndx, StringData value) const;
                 ConstTableView find_all_binary(size_t column_ndx, BinaryData value) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, DateTime, StringData, BinaryData]
        DESCR  : *g_dyn_view_value_return_descr
      RETURN:
        TYPES  : [TableView, ConstTableView]
        DESCR  : The view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_find_all_xxx
        DESCR  :
  - g_dyn_view_sort:
      NAME     : sort
      SUMMARY  : &g_dyn_view_get_sorted_view_summary
                 Sort the view.
      DESCR    : &g_dyn_view_get_sorted_view_desc
                 This method will sort the rows by using values of a given column.
                 Currently sort is only supported on Integer, Boolean and Date ColumnTypes.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      - NAME   : ascending
        TYPES  : bool
        DESCR  : "If <code>true</code>, rows are sorted ascending. Default: <code>true</code>."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_sort
        DESCR  :
- Aggregates:
  METHODS:
  - g_dyn_view_sum_int:
  - g_dyn_view_sum_float:
  - g_dyn_view_sum_double:
      TITLE    : sum*
      NAMES    : [sum_int, sum_float, sum_double]
      SUMMARY  : &g_dyn_view_sum_summary
                 Calculates the sum.
      DESCR    :
      - TEXT   : &g_dyn_view_sum_descr
                 Calculates the sum of the values in the selected column.
      - TEXT   : *g_dyn_table_sum_descr_notes
      - TEXT   : >
                 As the sum of many <code>float</code>
                 values can be greater than the maximum value of the type, a <code>double</code>
                 is returned.
      CONST    : True
      SIGNATURE: |
                 int64_t sum_int(size_t column_ndx) const;
                 double  sum_float(size_t column_ndx) const;
                 double  sum_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      RETURN:
        TYPES  : [int64_t, double, double]
        DESCR  : >
                 The sum of values of the cells.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_sum
        DESCR  :

  - g_dyn_view_average_int:
  - g_dyn_view_average_float:
  - g_dyn_view_average_double:
      TITLE    : average*
      NAMES    : [average_int, average_float, average_double]
      SUMMARY  : &g_dyn_view_average_summary
                 Calculates the average.
      DESCR    :
      - TEXT   : &g_dyn_view_average_descr
                 Calculates the average of a column.
      - TEXT   : *g_dyn_table_average_descr_notes
      - TEXT   : *g_dyn_table_average_descr_double
      CONST    : True
      SIGNATURE: |
                 double  average_int(size_t column_ndx) const;
                 double  average_float(size_t column_ndx) const;
                 double  average_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      RETURN:
        TYPES  : [double, double, double]
        DESCR  : >
                 The average of values of the cells.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_average
        DESCR  :


  - g_dyn_view_maximum_int:
  - g_dyn_view_maximum_float:
  - g_dyn_view_maximum_double:
      TITLE    : maximum*
      NAMES    : [maximum_int, maximum_float, maximum_double]
      SUMMARY  : &g_dyn_view_maximum_summary
                 Find highest value.
      DESCR    : &g_dyn_view_maximum_descr
                 Find the highest value.
      CONST    : True
      SIGNATURE: |
                 int64_t maximum_int(size_t column_ndx) const;
                 double  maximum_float(size_t column_ndx) const;
                 double  maximum_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      RETURN:
        TYPES  : [int64_t, double]
        DESCR  : &g_dyn_view_maximum_return1_descr
                 The maximum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_maximum
        DESCR  :
  - g_dyn_view_minimum_int:
  - g_dyn_view_minimum_float:
  - g_dyn_view_minimum_double:
      TITLE    : minimum*
      NAMES    : [minimum_int, minimum_float, minimum_double]
      SUMMARY  : &g_dyn_view_minimum_summary
                 Find lowest value.
      DESCR    : &g_dyn_view_minimum_descr
                 Find the lowest value.
      CONST    : True
      SIGNATURE: |
                 int64_t minimum_int(size_t column_ndx) const;
                 double  minimum_float(size_t column_ndx) const;
                 double  minimum_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_view_column_index_descr
      RETURN:
        TYPES  : [int64_t, double]
        DESCR  : &g_dyn_view_minimum_return1_descr
                 The minimum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_minimum
        DESCR  :

- Dump:
  METHODS:
  - g_dyn_view_to_json:
      NAME     : to_json
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : &g_dyn_view_to_json_descr
                 >
                 This method will convert a view and its columns and rows
                 to a JSON compatible representation.

                 The JavaScript Object Notation (<a
                 href="http://json.org">JSON</a>) is useful for
                 web/mobile applications and serialization.

                 A table (and subtables) will be formatted as an array of rows, and
                 a row will be formatted as an object.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_dyn_view_to_json_parm1_descr
                 Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_to_json
        DESCR  :

  - g_dyn_view_to_string_2:
      IGNORE   : ""
  - g_dyn_view_to_string:
      NAME     : to_string
      SUMMARY  : &g_dyn_view_to_string_summary
                 Convert view to a string.
      DESCR    : &g_dyn_view_to_string_descr
                 This method will convert a view and its columns and rows to a
                 human readable format.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_dyn_view_to_string_parm1_descr
                 Output stream.
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "The number of rows to convert. Default: 500."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_to_string
        DESCR  :

  - g_dyn_view_row_to_string:
      NAME     : row_to_string
      SUMMARY  : &g_dyn_view_row_to_string_summary
                 Convert a row to a string.
      DESCR    : &g_dyn_view_row_to_string_descr
                 This method will convert a specified row to a
                 human readable format.
      CONST    : true
      PARAMS:
      - NAME   : row_ndx
        TYPES  : std::size_t
        DESCR  : &g_dyn_view_row_to_string_parm1_descr
                 The index of the row to convert.
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : *g_dyn_view_to_string_parm1_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_view_to_string
        DESCR  :
