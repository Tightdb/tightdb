#
# C++ reference documentation for Table class
#

ID         : class_dyn_table
TITLE      : Table (dynamic)
SUMMARY    : &g_dyn_table_intro_summary
             TightDB table.
DESCR      : &g_dyn_table_intro_descr
             >
             The Table class is the core class of the TightDB framework. It allows you
             to efficiently work with data in terms of rows and columns. The value of
             a cell (specific column, specific row) is compacted in order to keep the
             overall memory consumption as small as possible. The internal data structure
             is optimized so retrieving a particular cell in a table is as fast as possible
             (often faster than native data structures).

             The dynamic table can be used when the structure of the data is not known a
             priori. This situation is common if you recieve data from different sources, and
             these sources often changes. You can say that a dynamic table resembles the
             flexible data structures often found in dynamic languages like PHP and JavaScript.

             You can add and remove columns at run time as your application requires it. When you
             add a column, a type must be specified. The most common types including integers,
             timestamps and strings are supported. It is also possible to use a TightDB table class
             as column type. This means that you can have tables of tables structure.

             Moreover, TightDB introduces a column type called {@link class_mixed}. A value of the
             Mixed type can be any supported value of TightDB. This implies - as the name
             indicates - that you can mix the type of values in the column. In one row the
             value could be an integer, in another row the value could be a string or even a table.

             It is possible to query a dynamic table using {@link class_dyn_query} objects. The result
             set is often returned as a {@link class_dyn_tableview} object.

             NOTICE:
             For all methods which takes row and column index as parameters,
             you must ensure that these are in a valid range.
             You must also ensure that you use the correct type of method for
             the correct type of column. I.e. it's invalid to use 'getString(...)'
             with a column index which is of Boolean type - it must be of 'String'
             type and so forth.


SEE        : &g_dyn_table_intro_see
             >
             Besides the dynamic table described here, {@link class_typed_table} are preferred
             when the structure of your data is know at compile time. It provides additional
             type safety and auto-completion productivity compared to the dynamic table.
EXAMPLES   :
- DESCR:
  CODE     : ex_cpp_dyn_table_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES :
- State:
  METHODS:
  - g_dyn_table_size:
      NAME     : size
      SUMMARY  : &g_dyn_table_size_summary
                 Number of rows.
      DESCR    : &g_dyn_table_size_descr
                 This method returns the number of rows in the table.
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_return_descr
                 The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_size
        DESCR  :

  - g_dyn_table_is_empty:
      NAME     : is_empty
      SUMMARY  : &g_dyn_table_is_empty_summary
                 Is table empty?
      DESCR    : &g_dyn_table_is_empty_descr
                 This method checks if the table is empty that is, it has zero rows.
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : &g_dyn_table_is_empty_return_descr
                 <code>true</code> if table is empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_empty
        DESCR  :

# TODO: describe what to use it for...
  - g_dyn_table_is_valid:
      NAME     : is_valid
      SUMMARY  : &g_dyn_table_is_valid_summary
                 Is table valid/consistent?
      DESCR    : &g_dyn_table_is_valid_descr
                 This method will perform a number of consistency checks on a table and its
                 columns.
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : &g_dyn_table_is_valid_return_descr
                 <code>true</code> if table is valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_valid
        DESCR  :


- Table:
  METHODS:
  - g_dyn_table_clear:
      NAME     : clear
      SUMMARY  : &g_dyn_table_clear_summary
                 Remove all rows.
      DESCR    : &g_dyn_table_clear_descr
                 This method will remove all rows in the table.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear
        DESCR  :

  - g_dyn_table_optimize:
      NAME     : optimize
      SUMMARY  : &g_dyn_table_optimize_summary
                 Optimize a table.
      DESCR    : &g_dyn_table_optimize_descr
                 This method will optimize the internal data structures of a table.
                 The result is that the table will consume less memory and queries might
                 be faster.

                 This should be called as soon as there is an representative amount of
                 data in the table. The table will then reorganize itself into the most
                 effective format.

                 What is learned about the contents will be used in all future operations,
                 so you only need to call optimize once for each table.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_optimize
        DESCR  :

  - g_dyn_table_opertator==:
      NAME     : operator==
      SUMMARY  : &g_dyn_table_operator_eq_summary
                 Compare two tables for equality.
      DESCR    : &g_dyn_table_operator_eq_descr
                 This method compares two tables for equality. Two tables are equal only if
                 they contain the same columns and rows in the same order.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : &g_dyn_table_operator_eq_table_descr
                 The other table to compare with.
      RETURN:
        TYPES  : bool
        DESCR  : &g_dyn_table_operator_eq_return_descr
                 <code>true</code> if the two tables are equal, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator==
        DESCR  :

  - g_dyn_table_opertator!=:
      NAME     : operator!=
      SUMMARY  : &g_dyn_table_operator_neq_summary
                 Compare two tables for inequality.
      DESCR    : &g_dyn_table_operator_neq_descr
                 This method compares two tables for inequality.
                 Two tables are equal only if they contain the same columns and
                 rows in the same order.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : *g_dyn_table_operator_eq_table_descr
      RETURN:
        TYPES  : bool
        DESCR  : &g_dyn_table_operator_neq_return_descr
                 <code>true</code> if the two tables are not equal, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator!=
        DESCR  :


- Columns:
  METHODS:
  - g_dyn_table_add_column:
      NAME     : add_column
      SUMMARY  : &g_dyn_table_add_column_summary
                 Add a column.
      DESCR    : &g_dyn_table_add_column_descr
                 >
                 This method appends a column of the specified type and name to the table.
                 If it's used in a table which already has rows, the new column will just get
                 default values in those rows.

                 Currently, the following types are supported:
                 <ul>
                   <li><code>type_Bool</code> (default false)</li>
                   <li><code>type_Int</code> (default 0)</li>
                   <li><code>type_Float</code> (default 0.0)</li>
                   <li><code>type_Double</code> (default 0.0)</li>
                   <li><code>type_String</code> (default "")</li>
                   <li><code>type_Binary</code> (default ("")</li>
                   <li><code>type_Date</code> (default 0 - 1970-01-01 00:00:00)</li>
                   <li><code>type_Table</code> (default NULL)</li>
                   <li><code>type_Mixed</code> (default NULL)</li>
                 </ul>
      PARAMS:
      - NAME   : type
        TYPES  : DataType
        DESCR  : &g_dyn_table_add_column_param1_descr
                 Type of data in the new column.
      - NAME   : name
        TYPES  : StringData
        DESCR  : &g_dyn_table_add_column_param2_descr
                 Name of the new column.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_add_column_return_descr
                 Column index of the new column.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_add_column
        DESCR  :
# TODO:    size_t      add_subcolumn(const vector<size_t>& column_path, DataType type, StringData name);
#          void        remove_column(const vector<size_t>& column_path);

  - g_dyn_table_remove_column:
      NAME     : remove_column
      SUMMARY  : &g_dyn_table_remove_column_summary
                 Delete a column.
      DESCR    : &g_dyn_table_remove_column_descr
                 This method deletes the entire column from the table.
                 It can be called on active tables with content.
                 The indexes of the columns after this one will be decremented -
                 i.e. they are moved one position left.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_remove_column_param1_descr
                 Index of column to remove.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove_column
        DESCR  :
      SEE      : See also {@link g_dyn_table_get_column_index} to get the column
                 index from the column name.

  - g_dyn_table_rename_column:
      NAME     : rename_column
      SUMMARY  : &g_dyn_table_rename_column_summary
                 Rename a column.
      DESCR    : &g_dyn_table_rename_column_descr
                 This method renames the specified column.
# TODO: Add when vector indexing has been fixed
#      SIGNATURE: |
#                 void rename_column(size_t column_ndx, StringData name);
#                 void rename_column(const vector<size_t>& column_path, StringData name);
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_rename_column_param1_descr
                 Index of column to rename.
      - NAME   : name
        TYPES  : StringData
        DESCR  : &g_dyn_table_rename_column_param2_descr
                 New column name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_rename_column
        DESCR  :

  - g_dyn_table_get_column_count:
      NAME     : get_column_count
      SUMMARY  : &g_dyn_table_get_column_count_summary
                 Get the number of columns.
      DESCR    : &g_dyn_table_get_column_count_descr
                 This method retrieves the number of columns in the table.
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_column_count_return_descr
                 The number of columns.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_count
        DESCR  :

  - g_dyn_table_get_column_name:
      NAME     : get_column_name
      SUMMARY  : &g_dyn_table_get_column_name_summary
                 Get the name of a column.
      DESCR    : &g_dyn_table_get_column_name_descr
                 This method retrieves the name of a column using the column index.
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_column_name_param1_descr
                 The column index (starting from 0), and it is not checked if the column index is out of range.
      RETURN:
        TYPES  : StringData
        DESCR  : &g_dyn_table_get_column_name_return_descr
                 The column name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_name
        DESCR  :

  - g_dyn_table_get_column_index:
      NAME     : get_column_index
      SUMMARY  : &g_dyn_table_get_column_index_summary
                 Get the index of a column.
      DESCR    : &g_dyn_table_get_column_index_descr
                 This method gets the index of a column using the column name.
      CONST    : True
      PARAMS:
      - NAME   : column_name
        TYPES  : StringData
        DESCR  : &g_dyn_table_name_of_column_descr
                 The name of the column to find.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_column_index_return_descr
                 The column index or <code>std::size_t(-1)</code> if there is no column with the specified name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_index
        DESCR  :

  - g_dyn_table_get_column_type:
      NAME     : get_column_type
      SUMMARY  : &g_dyn_table_get_column_type_summary
                 Get the type of a column.
      DESCR    : &g_dyn_table_get_column_type_descr
                 >
                 This method gets the type of a column using the column index. Currently,
                 the following types are supported:
                 <ul>
                   <li><code>type_Bool</code></li>
                   <li><code>type_Int</code></li>
                   <li><code>type_Float</code></li>
                   <li><code>type_Double</code></li>
                   <li><code>type_String</code></li>
                   <li><code>type_Binary</code></li>
                   <li><code>type_Date</code></li>
                   <li><code>type_Table</code></li>
                   <li><code>type_Mixed</code></li>
                 </ul>
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_column_type_parm1_descr
                 The column index.
      RETURN:
        TYPES  : DataType
        DESCR  : &g_dyn_table_get_column_type_return1_descr
                 The column type.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_type
        DESCR  :

  - g_dyn_table_add_int:
      NAME     : add_int
      SUMMARY  : &g_dyn_table_add_int_summary
                 Add value to all cells in a column.
      DESCR    : &g_dyn_table_add_int_descr
                 Add an integer value to all the cells in the specified column.
                 There is no overflow or underflow protection.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_add_int_parm1_descr
                 Index of the column. The column must be of DataType <code>type_Int</code>.
      - NAME   : value
        TYPES  : int64_t
        DESCR  : &g_dyn_table_add_int_parm2_descr
                 Value to add to all cells in the column.

- Rows:
  METHODS:
  - g_dyn_table_add_empty_row:
      NAME     : add_empty_row
      SUMMARY  : &g_dyn_table_add_empty_row_summary
                 Append empty rows.
      DESCR    : &g_dyn_table_add_empty_row_descr
                 This method adds one or more empty rows at the end of the table.
                 The default cell values are 0, null, or "", as appropriate to the column types.
      SIGNATURE: |
                 void add_empty_row(size_t num_rows = 1)
      PARAMS:
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : &g_dyn_table_add_empty_row_parm1_descr
                 "Number of rows to add (default: 1)."

  - g_dyn_table_insert_empty_row:
      NAME     : insert_empty_row
      SUMMARY  : &g_dyn_table_insert_empty_row_summary
                 Insert empty rows.
      DESCR    : &g_dyn_table_insert_empty_row_descr
                 This method inserts one or more empty rows with default values at a given position.
                 The old rows will be shifted downwards i.e., the row numbers will be incremented.
                 The default cell values are 0, 0.0, null, or "", as appropriate to the column types.
      SIGNATURE: |
                 void insert_empty_row(size_t row_ndx, size_t num_rows = 1)
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_insert_empty_row_parm1_descr
                 Position to insert at.
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : &g_dyn_table_insert_empty_row_parm2_descr
                 "Number of rows to insert (default: 1)."

  - g_dyn_table_insert_bool:
  - g_dyn_table_insert_int:
  - g_dyn_table_insert_enum:
  - g_dyn_table_insert_float:
  - g_dyn_table_insert_double:
  - g_dyn_table_insert_date:
  - g_dyn_table_insert_string:
  - g_dyn_table_insert_binary:
  - g_dyn_table_insert_mixed:
  - g_dyn_table_insert_subtable:
  - g_dyn_table_insert_done:
      TITLE    : insert_*
      NAMES    : [insert_bool, insert_int, insert_enum, insert_float, insert_double,
                  insert_date, insert_string, insert_binary, insert_mixed, insert_subtable, insert_done]
      SUMMARY  : &g_dyn_table_insert_xxx_summary
                 Insert a value.
      DESCR    : &g_dyn_table_insert_xxx_descr
                 >
                 These methods are used to insert new rows in a table.

                 <strong>WARNING</strong>: These methods support inserts with maximal performance.
                 But they can easily corrupt the database if used incorrectly! When inserting
                 a new row, you have to call the corresponding insert method for <em>every</em> column in the table
                 and end the insert sequence by calling {@link g_dyn_table_insert_done insert_done()}.

                 <code>insert_binary()</code> will copy the data provided.

      SIGNATURE: |
                 void insert_bool(size_t column_ndx, size_t row_ndx, bool value)
                 void insert_int(size_t column_ndx, size_t row_ndx, int64_t value)
                 template<class E>void insert_enum(size_t column_ndx, size_t row_ndx, E value)
                 void insert_float(size_t column_ndx, size_t row_ndx, float value)
                 void insert_double(size_t column_ndx, size_t row_ndx, double value)
                 void insert_date(size_t column_ndx, size_t row_ndx, Date value)
                 void insert_string(size_t column_ndx, size_t row_ndx, StringData value)
                 void insert_binary(size_t column_ndx, size_t row_ndx, BinaryData value)
                 void insert_mixed(size_t column_ndx, size_t row_ndx, Mixed value)
                 void insert_subtable(size_t column_ndx, size_t row_ndx)
                 void insert_done()
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_insert_parm1_descr
                 The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_insert_parm2_descr
                 The row index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData, Mixed]
        DESCR  : &g_dyn_table_insert_parm3_descr
                 The value to insert.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_insert_xxx
        DESCR  :
      SEE      : "For a safe way to insert rows, use {@link g_dyn_table_insert_empty_row}, and then set individual values in the columns."

  - g_dyn_table_remove_row:
      NAME     : remove
      SUMMARY  : &g_dyn_table_remove_row_summary
                 Delete a row.
      DESCR    : &g_dyn_table_remove_row_descr
                 This method deletes a specific row.
                 All rows with a larger row index will be repositioned with a row index one lower.
      SIGNATURE: void remove(size_t row_ndx);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_remove_row_param1_descr
                 Position of the row to delete (first row index is 0).
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove
        DESCR  :

  - g_dyn_table_remove_last_row:
      NAME     : remove_last
      SUMMARY  : &g_dyn_table_remove_last_row_summary
                 Delete last row.
      DESCR    : &g_dyn_table_remove_last_row_descr
                 This method deletes the last row. Calling it on an empty table is an error.
      SIGNATURE: void remove_last();
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove_last_row
        DESCR  :


- Values:
  METHODS:
  - g_dyn_table_get_bool:
      NAME     : get_bool
  - g_dyn_table_get_int:
      NAME     : get_int
  - g_dyn_table_get_float:
      NAME     : get_float
  - g_dyn_table_get_double:
      NAME     : get_double
  - g_dyn_table_get_date:
      NAME     : get_date
  - g_dyn_table_get_string:
      NAME     : get_string
  - g_dyn_table_get_binary:
      NAME     : get_binary
  - g_dyn_table_get_mixed:
      NAME     : get_mixed
  - g_dyn_table_get_mixed_type:
      NAME     : get_mixed_type
  - g_dyn_table_get_subtable:
      NAME     : get_subtable
  - g_dyn_table_get_subtable_const:
      NAME     : get_subtable

      TITLE    : get_*
      SUMMARY  : &g_dyn_table_get_xxx_summary
                 Get cell value.
      DESCR    : &g_dyn_table_get_xxx_descr
                 This method will retrieve the value of a cell at a specific column/row.
      SIGNATURE: |
                 bool          get_bool(size_t column_ndx, size_t row_ndx) const;
                 int64_t       get_int(size_t column_ndx, size_t row_ndx) const;
                 Date          get_date(size_t column_ndx, size_t row_ndx) const;
                 float         get_float(size_t column_ndx, size_t row_ndx) const;
                 double        get_double(size_t column_ndx, size_t row_ndx) const;
                 StringData    get_string(size_t column_ndx, size_t row_ndx) const;
                 BinaryData    get_binary(size_t column_ndx, size_t row_ndx) const;
                 Mixed         get_mixed(size_t column_ndx, size_t row_ndx) const;
                 DataType      get_mixed_type(size_t column_ndx, size_t row_ndx) const

                 TableRef      get_subtable(size_t column_ndx, size_t row_ndx);
                 ConstTableRef get_subtable(size_t column_ndx, size_t row_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_xxx_parm1_descr
                 The column index (starting from 0).
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_xxx_parm2_descr
                 The row index (starting from 0).
      RETURN:
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData, Mixed, DataType]
        DESCR  : &g_dyn_table_get_xxx_return_descr
                 The value at the given cell.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_xxx
        DESCR  :

  - g_dyn_table_set_bool:
      NAME     : set_bool
  - g_dyn_table_set_int:
      NAME     : set_int
  - g_dyn_table_set_float:
      NAME     : set_float
  - g_dyn_table_set_double:
      NAME     : set_double
  - g_dyn_table_set_enum:
      NAME     : set_enum
  - g_dyn_table_set_date:
      NAME     : set_date
  - g_dyn_table_set_string:
      NAME     : set_string
  - g_dyn_table_set_binary:
      NAME     : set_binary
  - g_dyn_table_set_binary_2:
      IGNORE   : ""
  - g_dyn_table_set_mixed:
      NAME     : set_mixed

      TITLE    : set_*
      SUMMARY  : &g_dyn_table_set_xxx_summary
                 Set cell value.
      DESCR    : &g_dyn_table_set_xxx_descr
                 This method will replace the value of an existing cell (column/row).
      SIGNATURE: |
                 void set_bool(size_t column_ndx, size_t row_ndx, bool value);
                 void set_int(size_t column_ndx, size_t row_ndx, int64_t value);
                 void set_float(size_t column_ndx, size_t row_ndx, float value);
                 void set_double(size_t column_ndx, size_t row_ndx, double value);
                 template<class E> void set_enum(size_t column_ndx, size_t row_ndx, E value);
                 void set_date(size_t column_ndx, size_t row_ndx, Date value);
                 void set_string(size_t column_ndx, size_t row_ndx, StringData value);
                 void set_binary(size_t column_ndx, size_t row_ndx, BinaryData value);
                 void set_mixed(size_t column_ndx, size_t row_ndx, Mixed value);
                 void set_subtable(siz_t column_ndx, size_t row_ndx, const Table*);
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm2_descr
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData, Mixed]
        DESCR  : &g_dyn_table_set_xxx_parm3_descr
                 The value to assign to the specified cell.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_xxx
        DESCR  :

- Sub-tables:
  METHODS:
  - g_dyn_table_get_subtable_size:
      NAME     : get_subtable_size
      SUMMARY  : &g_dyn_table_get_subtable_size_summary
                 Get size of subtable.
      DESCR    : &g_dyn_table_get_subtable_size_descr
                 The value of a cell can be a table, also referred to as a subtable.
                 This method returns the number of rows of a subtable.
      CONST    : true
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm2_descr
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_subtable_size_return_descr
                 Number of rows in the subtable.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_subtable
        DESCR  :

  - g_dyn_table_clear_subtable:
      NAME     : clear_subtable
      SUMMARY  : &g_dyn_table_clear_subtable_summary
                 Remove all rows in the subtable.
      DESCR    : &g_dyn_table_clear_subtable_descr
                 The value of a cell can be a table, also referred to as a subtable.
                 This method deletes all rows of such a subtable.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm2_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear_subtable
        DESCR  :


- Indexes:
  METHODS:
  - g_dyn_table_set_index:
      NAME     : set_index
      SUMMARY  : &g_dyn_table_set_index_summary
                 Add an index to a column.
      DESCR    : &g_dyn_table_set_index_descr
                 This method adds an index to a column, and queries will be faster. But the table
                 will require more memory and inserts will be slower.
                 Currently only String columns can be indexed. Note, index cannot be removed.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_index
        DESCR  :

  - g_dyn_table_has_index:
      NAME     : has_index
      SUMMARY  : &g_dyn_table_has_index_summary
                 Is column indexed?
      DESCR    : &g_dyn_table_has_index_descr
                 This method checks if a specific column has an index.
      CONST    : true
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      RETURN:
        TYPES  : bool
        DESCR  : &g_dyn_table_has_index_return_descr
                 <code>true</code> if column is indexed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_has_index
        DESCR  :


- Searching:
  METHODS:
  - g_dyn_table_lookup:
      NAME     : lookup
      SUMMARY  : &g_dyn_table_lookup_summary
                 Lookup a value.
      DESCR    : &g_dyn_table_lookup_descr
                 This method will find the first row where the value of first column matches
                 a given string value. Defining the first column as a string with unique values,
                 it is possible to combine such a table with this method to emulate a hash
                 array using TightDB.
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : StringData
        DESCR  : &g_dyn_table_lookup_parm1_descr
                 The value to search for.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_lookup_return_descr
                 "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_lookup
        DESCR  :

  - g_dyn_table_find_first_bool:
      NAME     : find_first_bool
  - g_dyn_table_find_first_int:
      NAME     : find_first_int
  - g_dyn_table_find_first_float:
      NAME     : find_first_float
  - g_dyn_table_find_first_double:
      NAME     : find_first_double
  - g_dyn_table_find_first_date:
      NAME     : find_first_date
  - g_dyn_table_find_first_string:
      NAME     : find_first_string
  - g_dyn_table_find_first_binary:
      NAME     : find_first_binary

      TITLE    : find_first_*
      SUMMARY  : &g_dyn_table_find_first_xxx_summary
                 Find first matching row.
      DESCR    : &g_dyn_table_find_first_xxx_descr
                 The methods finds the first row which contains a given value in the specified column.
                 The method used must match the data type of the column.
      SIGNATURE: |
                 size_t find_first_bool(size_t column_ndx, bool value) const;
                 size_t find_first_int(size_t column_ndx, int64_t value) const;
                 size_t find_first_float(size_t column_ndx, float value) const;
                 size_t find_first_double(size_t column_ndx, double value) const;
                 size_t find_first_date(size_t column_ndx, Date value) const;
                 size_t find_first_string(size_t column_ndx, StringData value) const;
                 size_t find_first_binary(size_t column_ndx, BinaryData value) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_find_first_xxx_parm1_descr
                 The column index (starting from 0) to search in.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData]
        DESCR  : &g_dyn_table_find_first_xxx_parm2_descr
                 The value to search for.
      RETURN:
        TYPES  : size_t
        DESCR  : *g_dyn_table_lookup_return_descr
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_first_xxx
        DESCR  :

  - g_dyn_table_find_all_bool:
  - g_dyn_table_find_all_int:
  - g_dyn_table_find_all_float:
  - g_dyn_table_find_all_double:
  - g_dyn_table_find_all_date:
  - g_dyn_table_find_all_string:
  - g_dyn_table_find_all_binary:
  - g_dyn_table_find_all_bool_const:
  - g_dyn_table_find_all_int_const:
  - g_dyn_table_find_all_float_const:
  - g_dyn_table_find_all_double_const:
  - g_dyn_table_find_all_date_const:
  - g_dyn_table_find_all_string_const:
  - g_dyn_table_find_all_binary_const:
      TITLE    : find_all_*
      NAMES    : [find_all_int, find_all_bool, find_all_float, find_all_double,
                  find_all_date, find_all_string, find_all_binary,
                  find_all_int, find_all_bool, find_all_float, find_all_double,
                  find_all_date, find_all_string, find_all_binary]
      SUMMARY  : &g_dyn_table_find_all_xxx_summary
                 Find all matching rows.
      DESCR    : &g_dyn_table_find_all_xxx_descr
                 >
                 The method finds all rows with a specified value in a specified column.
                 The method used must match the DataType in the column that is searched.
      SIGNATURE: |
                 TableView      find_all_bool(size_t column_ndx, bool value);
                 TableView      find_all_int(size_t column_ndx, int64_t value);
                 TableView      find_all_float(size_t column_ndx, float value);
                 TableView      find_all_double(size_t column_ndx, double value);
                 TableView      find_all_date(size_t column_ndx, Date value);
                 TableView      find_all_string(size_t column_ndx, StringData value);
                 TableView      find_all_binary(size_t column_ndx, BinaryData value);

                 ConstTableView find_all_bool(size_t column_ndx, bool value) const;
                 ConstTableView find_all_int(size_t column_ndx, int64_t value) const;
                 ConstTableView find_all_float(size_t column_ndx, float value) const;
                 ConstTableView find_all_double(size_t column_ndx, double value) const;
                 ConstTableView find_all_date(size_t column_ndx, Date value) const;
                 ConstTableView find_all_string(size_t column_ndx, StringData value) const;
                 ConstTableView find_all_binary(size_t column_ndx, BinaryData value) const;

      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_find_all_xxx_parm1_descr
                 The column index (starting from 0).
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, Date, StringData, BinaryData]
        DESCR  : &g_dyn_table_find_all_xxx_parm2_descr
                 The value to find in the column.
      RETURN:
        TYPES  : TableView
        DESCR  : &g_dyn_table_find_all_xxx_return_descr
                 The matching rows are returned as a {@link class_dyn_tableview} object.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_all_xxx
        DESCR  :

  - g_dyn_table_lower_bound_int:
  - g_dyn_table_upper_bound_int:
  - g_dyn_table_lower_bound_bool:
  - g_dyn_table_upper_bound_bool:
  - g_dyn_table_lower_bound_float:
  - g_dyn_table_upper_bound_float:
  - g_dyn_table_lower_bound_double:
  - g_dyn_table_upper_bound_double:
  - g_dyn_table_lower_bound_string:
  - g_dyn_table_upper_bound_string:
      TITLE    : lower_bound_* , upper_bound_*
      NAMES    : [ lower_bound_int,upper_bound_int, lower_bound_bool, upper_bound_bool,
                   lower_bound_float, upper_bound_float, lower_bound_double, upper_bound_double,
                   lower_bound_string, upper_bound_string ]
      SUMMARY  : Find the lower/upper bound in a sorted column.

      DESCR:
      - TEXT   : Find the lower/upper bound of the specified value
                 according to the specified column. The column must
                 already be sorted in ascending order.

                 For an integer column at index 0, and an integer
                 value '`v`', lower_bound_int(0,v) returns the index
                 '`l`' of the first row such that `get_int(0,l) &ge;
                 v`, and upper_bound_int(0,v) returns the index '`u`'
                 of the first row such that `get_int(0,u) &gt; v`. In
                 both cases, if no such row is found, the returned
                 value is the number of rows in the table.

      - TEXT   : |
                 <pre>
                     3 3 3 4 4 4 5 6 7 9 9 9
                     ^     ^     ^     ^     ^
                     |     |     |     |     |
                     |     |     |     |      -- Lower and upper bound of 15
                     |     |     |     |
                     |     |     |      -- Lower and upper bound of 8
                     |     |     |
                     |     |      -- Upper bound of 4
                     |     |
                     |      -- Lower bound of 4
                     |
                      -- Lower and upper bound of 1
                 </pre>

      - TEXT   : The string version assumes the order that is imposed
                 by StringData::operator<(). It uses simple byte-wise
                 lexicographical comparison. No Unicode or locale
                 dependent collation is taken into account.
      SIGNATURE: |
                 std::size_t lower_bound_int(std::size_t column_ndx, std::int64_t value) const noexcept;
                 std::size_t upper_bound_int(std::size_t column_ndx, std::int64_t value) const noexcept;
                 std::size_t lower_bound_bool(std::size_t column_ndx, bool value) const noexcept;
                 std::size_t upper_bound_bool(std::size_t column_ndx, bool value) const noexcept;
                 std::size_t lower_bound_float(std::size_t column_ndx, float value) const noexcept;
                 std::size_t upper_bound_float(std::size_t column_ndx, float value) const noexcept;
                 std::size_t lower_bound_double(std::size_t column_ndx, double value) const noexcept;
                 std::size_t upper_bound_double(std::size_t column_ndx, double value) const noexcept;
                 std::size_t lower_bound_string(std::size_t column_ndx, StringData value) const noexcept;
                 std::size_t upper_bound_string(std::size_t column_ndx, StringData value) const noexcept;
      CONST    : True
      # NOEXCEPT : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : std::size_t
        DESCR  : The index of a sorted column whose type matches the
                 suffix of the function name. These functions have
                 undefined behaviour if the specified column index is
                 out of bounds or does not correspond to a column of
                 the right type. It is safe to call these functions
                 even if the specified column is not sorted. Although
                 the returned index is then unspecified, it is still
                 guaranteed to be within the usual range.
      - NAME   : value
        TYPES  : [ int64_t, bool, float, double, StringData ]
        DESCR  : The value whose bound is queried for.
      RETURN:
        TYPES  : std::size_t
        DESCR  : The row index corresponding to the lower/upper
                 bound. Note that this index is always in the range
                 `[0,N]` where `N` is the number of rows in this
                 table, even if the column was not sorted.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_lower_upper_bound
        DESCR  :

  - g_dyn_table_get_sorted_view:
  - g_dyn_table_get_sorted_view_const:
      NAMES    : [get_sorted_view, get_sorted_view]
      SUMMARY  : &g_dyn_table_get_sorted_view_summary
                 Sort the table.
      DESCR    : &g_dyn_table_get_sorted_view_desc
                 This method will sort the rows by using values of a given column.
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 TableView      get_sorted_view(size_t column_ndx, bool ascending=true);
                 ConstTableView get_sorted_view(size_t column_ndx, bool ascending=true) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_get_sorted_view_parm1_descr
                 The column index (starting from 0).
      - NAME   : ascending
        TYPES  : bool
        DESCR  : &cpp_dyn_table_get_sorted_view_parm2_descr
                 "If <code>true</code>, rows are sorted ascending, otherwise descending. Default: <code>true</code>."
      RETURN:
        TYPES  : TableView
        DESCR  : &g_dyn_table_get_sorted_view_return_descr
                 A view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_sorted_view
        DESCR  :

  - g_dyn_table_distinct:
  - g_dyn_table_distinct_const:
      NAMES    : [distinct, distinct]
      SUMMARY  : &g_dyn_table_distinct_summary
                 Get distinct rows.
      DESCR    : &g_dyn_table_distinct_desc
                 >
                 This method will return a view with distinct rows for a given column
                 (first matching row for each unique value in the column).
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 TableView      distinct(size_t column_ndx);
                 ConstTableView distinct(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_distinct_parm1_desc
                 The column index (starting from 0).
      RETURN:
        TYPES  : TableView
        DESCR  : &g_dyn_table_distinct_return_desc
                 A view with the distinct rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_distinct
        DESCR  :

  - g_dyn_table_where:
  - g_dyn_table_where_const:
      NAMES    : [where, where]
      SIGNATURE: |
                 Query       where()
                 const Query where() const
      SUMMARY  : &g_dyn_table_where_summary
                 Query table.
      DESCR    : &g_dyn_table_where_descr
                 This method initiates a query in the table.  See {@link class_dyn_query}.
      RETURN:
        TYPES  : [Query, const Query]
        DESCR  : &g_dyn_table_where_return_descr
                 "A {@link class_dyn_query} object."
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_table_where


- Aggregates:
  METHODS:
  - g_dyn_table_count_int:
  - g_dyn_table_count_float:
  - g_dyn_table_count_double:
  - g_dyn_table_count_string:
      TITLE    : count_*
      NAMES    : [count_int, count_float, count_double, count_string]
      SUMMARY  : &g_dyn_table_count_summary
                 Count rows with a specfic value.
      DESCR    : &g_dyn_table_count_descr
                 This method counts the number of rows matching a specified value
                 in the specified column.
                 It is convinient to determine the number briefly compared to using
                 a {@link class_dyn_query} object.
      SIGNATURE: |
                 size_t count_int(size_t column_ndx, int64_t target) const;
                 size_t count_float(size_t column_ndx, float target) const;
                 size_t count_double(size_t column_ndx, double target) const;
                 size_t count_string(size_t column_ndx, StringData target) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_count_parm1_descr
                 The column index (starting from 0).
                 The data type in the column must match the type of the <code>target</code> value.
      - NAME   : target
        TYPES  : [int64_t, float, double, StringData]
        DESCR  : &g_dyn_table_count_parm2_descr
                 The value to count.
      RETURN:
        TYPES  : size_t
        DESCR  : &g_dyn_table_count_return_descr
                 The number of matching rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_count
        DESCR  :

  - g_dyn_table_sum_int:
  - g_dyn_table_sum_float:
  - g_dyn_table_sum_double:
      TITLE    : sum_*
      NAMES    : [sum, sum_float, sum_double]
      SUMMARY  : &g_dyn_table_sum_summary
                 Calculates the sum.
      DESCR    :
      - TEXT   : &g_dyn_table_sum_descr
                 This method calculates the sum of all values in the specified column.
      - TEXT   : >
                 As the sum of many <code>float</code>
                 values can be greater than the maximum value of the type, a <code>double</code>
                 is returned.
      SIGNATURE: |
                 int64_t sum(size_t column_ndx) const;
                 double  sum_float(size_t column_ndx) const;
                 double  sum_double(size_t column_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_sum_parm1_descr
                 The column index (starting from 0) to summarize.
      RETURN:
        TYPES  : [int64_t, double, double]
        DESCR  : &g_dyn_table_sum_return_descr
                 The sum.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_sum
        DESCR  :

  - g_dyn_table_maximum_int:
  - g_dyn_table_maximum_float:
  - g_dyn_table_maximum_double:
      TITLE    : maximum_*
      NAMES    : [maximum, maximum_float, maximum_double]
      SUMMARY  : &g_dyn_table_maximum_summary
                 Find highest value.
      DESCR    : &g_dyn_table_maximum_descr
                 The method finds the highest value in the specified column.
      SIGNATURE: |
                 int64_t maximum(size_t column_ndx) const;
                 float   maximum_float(size_t column_ndx) const;
                 double  maximum_double(size_t column_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_maximum_parm1_descr
                 Column index (starting from 0) to search.
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_dyn_table_maximum_return_descr
                 The maximum value in the column.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_maximum
        DESCR  :

  - g_dyn_table_minimum_int:
  - g_dyn_table_minimum_float:
  - g_dyn_table_minimum_double:
      TITLE    : minimum_*
      NAMES    : [minimum, minimum_float, minimum_double]
      SUMMARY  : &g_dyn_table_minimum_summary
                 Find lowest value.
      DESCR    : &g_dyn_table_minimum_descr
                 The method finds the lowest value in the specified column.
      CONST    : True
      SIGNATURE: |
                 int64_t minimum(size_t column_ndx) const;
                 float   minimum_float(size_t column_ndx) const;
                 double  minimum_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_maximum_parm1_descr
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_dyn_table_minimum_return_descr
                 The minimum value in the column.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_minimum
        DESCR  :

  - g_dyn_table_average_int:
  - g_dyn_table_average_float:
  - g_dyn_table_average_double:
      TITLE    : average_*
      NAMES    : [average, average_float, average_double]
      SUMMARY  : &g_dyn_table_average_summary
                 Calculates the average.
      DESCR    : &g_dyn_table_average_descr
                 This method calculates the average value in the specified column.
      CONST    : True
      SIGNATURE: |
                 double  average(size_t column_ndx) const;
                 double  average_float(size_t column_ndx) const;
                 double  average_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : *g_dyn_table_maximum_parm1_descr
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : &g_dyn_table_average_return1_descr
                 The average value in the column.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_average
        DESCR  :
- Dump:
  METHODS:
  - g_dyn_table_to_json:
      NAME     : to_json
      SUMMARY  : &g_dyn_table_to_json_summary
                 Convert table to JSON.
      DESCR    : &g_dyn_table_to_json_descr
                 This method will convert a table and its columns and rows to a
                 JSON compatible representation.

                 The JavaScript Object Notation (<a href="http://json.org">JSON</a>)
                 is useful for web/mobile applications and serialization.

                 A table (and subtables) will be formatted as a array of rows, and row will
                 be formatted as an object.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_json
        DESCR  :

  - g_dyn_table_to_string:
      NAME     : to_string
      SUMMARY  : &g_dyn_table_to_string_summary
                 Convert table to a string.
      DESCR    : &g_dyn_table_to_string_descr
                 >
                 This method will convert a table and its columns and rows to a format
                 which is easily read by humans.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_dyn_table_to_string_parm1_descr
                 Output stream.
      - NAME   : limit
        TYPES  : size_t
        DESCR  : &g_dyn_table_to_string_parm2_descr
                 "The number of rows to convert. Default: 500."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_string
        DESCR  :
      SEE      : See also {@link g_dyn_table_row_to_string} which do the same for a specific row.

  - g_dyn_table_row_to_string:
      NAME     : to_string
      SUMMARY  : &g_dyn_table_row_to_string_summary
                 Convert a row to a string.
      DESCR    : &g_dyn_table_row_to_string_descr
                 >
                 This method will convert a row to a format
                 which is easily read by humans.
      CONST    : true
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : &g_dyn_table_row_to_string_parm1_descr
                 The row index.
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : &g_dyn_table_row_to_string_parm2_descr
                 Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_string
        DESCR  :
