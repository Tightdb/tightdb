#line 2 "query_flex.ll"
#include <stdint.h>



#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */








/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */


#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif













/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */








/* %if-c-only */

/* %endif */




/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */


/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */




/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r



/* %endif */



/* %if-not-reentrant */
/* %endif */







/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */


	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]


/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r


/* %% [1.5] DFA */


/* %if-c-only Standard (non-C++) definition */


static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );


/* %endif */


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[423] =
    {   0,
        0,    0,   70,   68,    1,    2,   14,   68,   67,   68,
       68,    9,    3,    3,    9,   58,   58,    7,    4,    8,
       68,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,    9,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   68,   68,   68,   68,
        1,    2,    6,    0,   65,    0,   67,   59,    0,    0,
        0,    0,   12,    0,   66,    0,    0,   60,    0,    0,
       63,    0,   63,   58,    0,    0,   62,   10,    4,   11,
        0,    0,    0,    0,    0,    0,    0,    0,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,    5,   67,   67,   67,   67,   67,   67,   67,
       56,   67,   13,   67,   67,   67,    0,   67,   67,   67,
       67,   67,    0,   67,   67,   67,   67,   67,   67,   67,
       67,   13,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   63,    0,   63,    0,   62,   61,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,   12,
       15,   32,   67,   67,   67,   30,   67,   67,   67,   67,
       67,   67,   67,   50,    0,   67,   67,   51,   52,   67,
       14,   67,   31,   67,   67,   67,    0,    0,   67,   67,
       67,   47,   67,   67,   67,   67,   67,   67,    0,    0,

        0,    0,   50,   51,    0,   63,    0,   42,    0,    0,
        0,   39,   40,    0,   41,    0,    0,   67,    0,   67,
       67,   67,   67,   33,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   57,   22,   67,   17,   52,   27,   67,
        0,   55,   21,   48,   67,   67,    0,   67,    0,    0,
        0,    0,    0,   45,    0,   38,   44,    0,   67,   64,
        0,   67,   67,   67,   67,   67,   67,   67,   49,   67,
       67,   67,   67,   67,   67,   29,   67,   67,    0,    0,
        0,    0,    0,    0,   43,    0,   67,   67,   67,   30,
       67,   67,   67,   67,   67,   35,   67,   67,   67,   67,

       67,   67,    0,    0,    0,    0,   46,   67,   67,   23,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,    0,    0,    0,    0,   67,   67,   20,   67,   28,
       19,   67,   67,   67,   67,   50,   34,   67,    0,    0,
       50,    0,   32,   67,   67,   67,   37,   67,   24,   67,
        0,    0,    0,   18,   33,   67,   36,   67,    0,    0,
       55,   67,   67,    0,    0,    0,   67,   67,    0,    0,
       55,   67,   25,    0,    0,   26,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   54,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,    1,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   48,
       52,   53,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   14,   82,   14,    1,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,    1,    1,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    1,    1,    1,
        1,    1,    2,    1,    3,    1,    2,    4,    4,    4,
        4,    1,    1,    2,    1,    1,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    3,    1,    3,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    3,    3,    3
    } ;

static const flex_int16_t yy_base[492] =
    {   0,
        0,    0,  734, 2005,   85,  730,  701,   82,   72,  715,
       85, 2005, 2005,   79,   83,   90,  111,   88,   92,  695,
       78,  109,  139,  120,  149,  145,  154,  136,   80,  175,
      227,  222,  198,  211,  301,  660,  264,  239,  273,  287,
      283,  328,  336,  341,  346,  352,  631,  629,  627,  625,
      116,  691, 2005,  122, 2005,  433,  257,  426,  204,  604,
      602,  589, 2005,  115, 2005,  446,  247,  440,  119,  155,
      456,  447,  464,  511,  520,    0, 2005, 2005, 2005, 2005,
      568,  569,  568,  555,  123,  136,  538,  561,  460,  498,
      349,  484,  503,  528,  494,  522,  541,  547,  563,  557,

      567,  570,  577,  597,  646,  607,  617,  621,  512,  631,
      658,  661,  551,  651,  643,  636,  720,  735,  736,  702,
      706,  717,  548,  730,  741,  746,  753,  758,  780,  765,
      770, 2005,  776,  518,  516,    0,  502,  494,    0,  195,
      203,  854, 2005,  742,  858,  754,  862,    0,  514,  497,
      487,  497,  485,  491,  478,  487,  483,  486,  806,  810,
      815,  853,  840,  850,  862,  875,  896,  859,  904,  888,
      910,  913,  963,  940,  889,  867,  966,  923,  947,  975,
      958, 1000,  970,  984, 1012,  992, 1053, 1086, 1035, 1049,
     1058, 2005, 1038, 1055, 1072, 1076, 1085, 1093,  467,    0,

      465,    0,  241, 2005,  949, 1129, 1074, 2005,  467,  446,
      452, 2005, 2005,  445, 2005,  444,  421, 1111,  490, 1114,
     1122, 1119, 1128, 1134, 1138, 1162, 1157, 1178, 1175, 1186,
     1196, 1191, 1214, 1214, 1172, 1232, 1220, 1226, 1235, 1239,
     1275, 1308, 1248, 1260, 1288, 1283,    0, 1298,    0,    0,
      261, 1329,  418, 2005,  418, 2005, 2005,  431, 1305, 2005,
      483, 1312, 1325, 1328, 1335, 1347, 1353, 1341, 1365, 1375,
     1390, 1371, 1410, 1418, 1394, 1318, 1431, 1428,    0,    0,
        0,    0,  280, 1319, 2005,  414, 1435, 1456, 1470, 1381,
     1478, 1492, 1495, 1482, 1485, 1401, 1507, 1521, 1541, 1536,

     1544, 1499,    0,    0,  291, 1594, 2005, 1550, 1588, 1547,
     1565, 1602, 1592, 1606, 1611, 1615, 1627, 1630, 1651, 1654,
     1668,    0,    0,  311, 1342, 1689, 1671, 1675, 1679, 1692,
     1696, 1713, 1731, 1717, 1739, 1735, 1742, 1754,    0,    0,
     2005, 1791, 1747, 1751, 1789, 1794, 1777, 1801, 1781, 1819,
        0,    0, 1825, 1797, 1804, 1839, 1816, 1857,    0,    0,
     1896, 1866, 1845,    0,    0, 1888, 1880, 1896,    0,    0,
     1916, 1901, 1885,    0,  466, 1891,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  465,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  463,    0,    0,    0,    0,

        0,    0,    0,    0,  462,  457, 2005,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  459,
     2005, 2005, 1987, 1990, 1995,  465,  458,  453,  450,  449,
     1999,  445,  444,  439,  437,  436,  425,  420,  419,  414,
      412,  411,  406,  404,  399,  397,  393,  392,  391,  379,
      375,  372,  366,  361,  356,  349,  348,  347,  342,  335,
      331,  330,  324,  298,  290,  289,  286,  285,  284,  281,
      250,  249,  246,  237,  233,  232,  228,  197,  193,  187,
      182,  173,  172,  159,  137,  135,  133,  119,  118,  103,
       92

    } ;

static const flex_int16_t yy_def[492] =
    {   0,
      422,    1,  422,  422,  422,  422,  422,  423,  424,  422,
      425,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  422,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  422,  422,  422,  422,
      422,  422,  422,  423,  422,  422,  424,  424,  422,  422,
      422,  422,  422,  425,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  426,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  422,   35,   35,  424,
      424,  424,  422,  424,  424,  424,  424,  424,  424,  424,
      424,  422,  424,  422,  422,  427,  422,  422,  428,  422,
      422,  422,  422,  422,  422,  422,  422,  426,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  422,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  422,  422,  424,  424,
      424,  422,  424,  424,  424,  424,  424,  424,  422,  429,

      422,  430,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  424,  431,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  422,  424,  424,  424,  424,  424,  424,
      422,  422,  424,  424,  424,  424,  432,  424,  433,  434,
      422,  422,  422,  422,  422,  422,  422,  422,  424,  422,
      431,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  435,  436,
      437,  438,  422,  422,  422,  422,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  439,  440,  422,  422,  422,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  441,  442,  422,  422,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  443,  444,
      422,  422,  424,  424,  424,  424,  424,  424,  424,  424,
      445,  446,  422,  424,  424,  424,  424,  424,  447,  448,
      422,  424,  424,  449,  450,  422,  424,  424,  451,  452,
      422,  424,  424,  453,  422,  424,  454,  455,  456,  457,
      458,  459,  460,  461,  462,  422,  463,  464,  465,  466,
      467,  468,  469,  470,  471,  422,  472,  473,  474,  475,

      476,  477,  478,  479,  422,  422,  422,  480,  481,  482,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  422,
      422,    0,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422

    } ;

static const flex_int16_t yy_nxt[2092] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   12,   14,   15,   13,   16,   17,   17,
       17,    4,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   29,   29,   31,   29,   32,
       33,   29,   29,   29,   34,   35,   29,   29,   29,   29,
       29,   36,    4,   12,   29,   37,   38,   24,   25,   26,
       39,   28,   29,   40,   29,   29,   41,   29,   42,   43,
       29,   29,   29,   44,   45,   46,   29,   29,   29,   29,
       29,   47,    4,   48,   49,   50,   51,   55,   51,   58,
       58,   58,   58,   65,   67,  420,   68,   68,   68,   68,

       71,   71,   71,   71,   72,   73,  419,   74,   74,   74,
       74,   78,   53,   69,   78,   79,   80,   51,   70,   51,
       75,  418,  417,   65,   59,   72,   73,   55,   74,   74,
       74,   74,   59,   81,   56,   82,  416,   66,  415,   76,
      414,   75,   69,   83,   84,   85,   89,   70,   90,   75,
       77,   86,   87,   91,   88,   60,   61,   62,  140,   93,
       96,   59,  413,   60,   61,   62,  102,   66,   76,   94,
       75,   77,   59,   95,   56,  412,  411,   92,  153,   97,
      100,  141,   91,   98,   99,  410,  154,  140,   59,   96,
      409,   59,   60,   61,   62,  102,  406,   59,   94,  155,

      405,   59,   95,   60,   61,   62,   59,   57,   97,  101,
      141,  156,   98,   99,  103,  111,  111,  111,  111,   60,
       61,   62,   60,   61,   62,  112,  203,   59,   60,   61,
       62,  404,   60,   61,   62,  403,  402,   60,   61,   62,
      401,  113,  204,  104,  105,  105,  105,  105,  107,  400,
       59,  114,  399,  397,  112,  203,  108,  115,   60,   61,
       62,  106,  109,   59,   71,   71,   71,   71,  110,   94,
      113,  204,   57,   95,   59,  251,   57,  107,   57,   59,
      116,   60,   61,   62,  396,  108,  115,  395,  394,  393,
      106,   59,  392,  391,   60,   61,   62,  110,   94,  101,

      283,  390,   95,   92,  251,   60,   61,   62,   91,   59,
       60,   61,   62,  117,  305,  118,   59,  106,  119,  119,
      119,  119,   60,   61,   62,   59,  104,  389,  126,  283,
      124,  120,  125,  387,  386,   59,  324,   91,  385,   59,
       60,   61,   62,  305,  121,  384,  106,   60,   61,   62,
      383,  382,  381,   59,  107,  103,   60,   61,   62,  380,
      120,  341,  108,  112,  379,  324,   60,   61,   62,  377,
       60,   61,   62,  122,  110,  375,  120,  162,  374,  113,
       59,  116,  370,  107,   60,   61,   62,  115,   59,  122,
      341,  108,  112,   59,  369,  365,  364,  127,   59,  128,

      360,   59,  359,  110,   59,  120,  162,  352,  113,  351,
      129,   60,   61,   62,  340,  339,  115,  323,  130,   60,
       61,   62,  322,   64,   60,   61,   62,  131,   54,   60,
       61,   62,   60,   61,   62,   60,   61,   62,   54,  304,
      303,   54,  282,   58,   58,   58,   58,  281,  279,   54,
       54,   64,  250,  249,   64,   73,  202,   68,   68,   68,
       68,  200,   64,   64,  144,  144,  144,  144,  148,  421,
       75,  408,  407,   71,   71,   71,   71,  398,   59,  388,
      378,  145,  145,  145,  145,   54,  142,  307,  260,   54,
      286,  285,  256,   54,  142,  260,  258,  159,   64,   75,

       77,   54,   64,  257,  256,   54,   64,   54,  136,   60,
       61,   62,   59,  160,   64,  142,  143,  255,   64,  254,
       64,  139,  163,  142,  143,   72,   73,  160,   74,   74,
       74,   74,  146,  166,  146,  253,   59,  147,  147,  147,
      147,   75,  160,   60,   61,   62,   59,   57,  161,  133,
       59,  180,  217,  216,  215,   59,  160,  181,  214,  213,
      164,  167,  166,  212,   59,  211,  210,   60,   61,   62,
       75,   77,  209,  165,   59,  208,  201,   60,   61,   62,
       59,   60,   61,   62,   57,  168,   60,   61,   62,  164,
      167,  169,  170,   59,  171,   60,   61,   62,  199,   59,

      133,  192,  165,   59,  172,   60,   61,   62,  174,   59,
      173,   60,   61,   62,  168,   59,  158,  157,  152,   59,
      169,  170,   59,  172,   60,   61,   62,  151,  174,   59,
       60,   61,   62,  172,   60,   61,   62,  174,  150,  173,
       60,   61,   62,  176,  149,  177,   60,   61,   62,   59,
       60,   61,   62,   60,   61,   62,  178,  174,  179,   59,
       60,   61,   62,  105,  105,  105,  105,  175,  182,   59,
      186,  138,  176,   59,  177,  111,  111,  111,  111,  185,
       60,   61,   62,   59,  137,  178,   57,  179,   59,  184,
       60,   61,   62,   52,  185,   59,  183,  182,   59,  186,

       60,   61,   62,   59,   60,   61,   62,  135,  185,  134,
       59,  133,  132,   59,   60,   61,   62,  123,   80,   60,
       61,   62,   63,  185,   53,  183,   60,   61,   62,   60,
       61,   62,   52,  422,   60,   61,   62,  187,  187,  187,
      187,   60,   61,   62,   60,   61,   62,  422,  422,   57,
       57,  189,  190,  422,   59,  422,  207,  188,   59,  144,
      144,  144,  144,  191,  422,   57,   57,  422,  422,   59,
      160,  147,  147,  147,  147,  422,  422,  422,   57,   57,
      189,  191,   59,  172,  422,   60,   61,   62,  422,   60,
       61,   62,  191,   59,   57,   57,  159,  422,   59,  160,

       60,   61,   62,  422,  422,   59,  422,   57,   57,  422,
       59,  191,  193,   60,   61,   62,  195,   59,  422,  422,
      161,  194,   59,  185,   60,   61,   62,  181,   59,   60,
       61,   62,   59,  198,  422,  422,   60,   61,   62,  422,
      197,   60,   61,   62,  422,  219,  422,  196,   60,   61,
       62,  422,  185,   60,   61,   62,  422,  422,   59,   60,
       61,   62,   59,   60,   61,   62,  205,   59,  205,  422,
      422,  206,  206,  206,  206,  145,  145,  145,  145,  147,
      147,  147,  147,  218,  220,  422,  422,  224,  142,   60,
       61,   62,   59,   60,   61,   62,  422,  235,   60,   61,

       62,  222,   59,  422,  422,   59,  234,  234,  234,  234,
      221,   59,  218,  220,   59,  422,  224,  142,  143,   59,
      422,  422,   77,   60,   61,   62,  235,   59,  422,  422,
      222,  422,  226,   60,   61,   62,   60,   61,   62,  221,
       59,  223,   60,   61,   62,   60,   61,   62,   59,  225,
       60,   61,   62,  422,  227,  422,   59,  228,   60,   61,
       62,  226,   59,  422,  422,   59,  206,  206,  206,  206,
      223,   60,   61,   62,  233,   59,  422,  422,  225,   60,
       61,   62,  422,  228,  422,  422,  228,   60,   61,   62,
      229,  230,   59,   60,   61,   62,   60,   61,   62,   59,

      236,  422,  422,  233,  231,  237,   60,   61,   62,  422,
       59,  232,  422,  422,  161,   59,  422,  422,   59,  229,
      230,  422,   59,   60,   61,   62,  422,   59,  422,  236,
       60,   61,   62,  231,  240,  422,   59,  238,  422,  422,
      232,   60,   61,   62,   59,  422,   60,   61,   62,   60,
       61,   62,   59,   60,   61,   62,  422,  239,   60,   61,
       62,  422,  422,  240,   59,  422,  238,   60,   61,   62,
      187,  187,  187,  187,  188,   60,   61,   62,  422,  244,
      243,  247,  228,   60,   61,   62,  239,   59,  245,  422,
       59,  252,  252,  252,  252,   60,   61,   62,  241,  422,

      241,   59,  422,  242,  242,  242,  242,   59,  245,  243,
       59,  246,  422,  422,  237,  245,  422,  245,   60,   61,
       62,   60,   61,   62,   59,  422,  422,  422,   59,  422,
      422,  422,   60,   61,   62,  161,  422,   59,   60,   61,
       62,   60,   61,   62,  244,   59,  206,  206,  206,  206,
      259,  248,  263,  262,  265,   60,   61,   62,  422,   60,
       61,   62,  264,   59,  266,  422,   59,  422,   60,   61,
       62,   59,  267,  422,   59,  422,   60,   61,   62,  259,
       59,  263,  262,  265,  422,  422,   59,  269,  422,  143,
       59,  264,  422,  266,   60,   61,   62,   60,   61,   62,

      422,  267,   60,   61,   62,   60,   61,   62,  270,   59,
      268,   60,   61,   62,   59,  271,  270,   60,   61,   62,
      272,   60,   61,   62,   59,  274,  422,   59,  422,  422,
       59,  234,  234,  234,  234,  422,  273,  270,   59,  268,
       60,   61,   62,   59,  271,   60,   61,   62,   59,  272,
      422,  422,  422,  275,  274,   60,   61,   62,   60,   61,
       62,   60,   61,   62,  422,  273,   59,  422,  422,   60,
       61,   62,   59,  422,   60,   61,   62,  276,   59,   60,
       61,   62,  275,  422,   59,  277,  422,   59,  422,  422,
      422,   59,  242,  242,  242,  242,  422,   60,   61,   62,

       59,  278,  422,   60,   61,   62,  276,  280,  422,   60,
       61,   62,   59,  270,  277,   60,   61,   62,   60,   61,
       62,  422,   60,   61,   62,  242,  242,  242,  242,  278,
      278,   60,   61,   62,  287,   59,  306,  306,  306,  306,
       59,  422,  269,   60,   61,   62,  252,  252,  252,  252,
       59,  422,  422,  422,  284,  289,  288,   59,  278,  342,
      342,  342,  342,  287,   59,  422,   60,   61,   62,  291,
       59,   60,   61,   62,  284,  294,  422,   59,  290,  422,
       59,   60,   61,   62,  289,  288,  292,   59,   60,   61,
       62,  422,  293,   59,  422,   60,   61,   62,  291,   59,

      422,   60,   61,   62,  294,   59,  295,  290,   60,   61,
       62,   60,   61,   62,  297,  292,  295,   59,   60,   61,
       62,  293,  422,   59,   60,   61,   62,   59,  300,  422,
       60,   61,   62,   59,  422,  295,   60,   61,   62,  296,
      422,  422,   59,  297,  422,  295,   59,  298,   60,   61,
       62,  422,  422,   59,   60,   61,   62,  300,   60,   61,
       62,  301,   59,  299,   60,   61,   62,  422,  296,  308,
       59,  302,  422,   60,   61,   62,  298,   60,   61,   62,
       59,  422,  422,   59,   60,   61,   62,   59,  422,  422,
      301,  422,  299,   60,   61,   62,  422,  422,  308,  422,

      302,   60,   61,   62,  309,  422,  422,  422,   59,  310,
      422,   60,   61,   62,   60,   61,   62,  311,   60,   61,
       62,  312,   59,  313,  422,  422,  422,  314,  315,  321,
       59,  422,  422,  309,   59,  316,  422,   59,  310,   60,
       61,   62,  422,  422,   59,  422,  311,   59,  422,  422,
      312,   59,  313,   60,   61,   62,  314,  315,  321,   59,
      422,   60,   61,   62,  316,   60,   61,   62,   60,   61,
       62,  317,  422,   59,  318,   60,   61,   62,   60,   61,
       62,  319,   60,   61,   62,  422,  422,  320,   59,  326,
       60,   61,   62,   59,  422,  422,   59,  422,  422,   59,

      317,  422,   59,  318,   60,   61,   62,  422,  422,  328,
      319,  306,  306,  306,  306,  325,  320,   59,  326,   60,
       61,   62,  327,  422,   60,   61,   62,   60,   61,   62,
       60,   61,   62,   60,   61,   62,  329,  330,  328,  331,
       59,  332,  422,  422,   59,  422,  422,  422,   60,   61,
       62,  327,  333,  422,   59,  422,  422,  422,   59,  334,
      422,  422,  422,   59,  335,  329,  330,   59,  331,  422,
      332,   60,   61,   62,  422,   60,   61,   62,  422,   59,
      422,  333,   59,  422,  422,   60,   61,   62,  334,   60,
       61,   62,  422,  335,   60,   61,   62,  338,   60,   61,

       62,  336,  422,   59,  337,  422,   59,  422,  422,  422,
       60,   61,   62,   60,   61,   62,  344,  422,  345,  422,
       59,  343,  422,   59,  422,  422,  338,   59,  422,  422,
      336,   59,  422,  337,   60,   61,   62,   60,   61,   62,
      422,   59,  346,  422,   59,  344,  422,  345,   59,  422,
      343,   60,   61,   62,   60,   61,   62,  348,   60,   61,
       62,  347,   60,   61,   62,   59,  422,  422,  422,   59,
      422,  346,   60,   61,   62,   60,   61,   62,  349,   60,
       61,   62,  422,   59,  354,  422,  348,   59,  350,  422,
      347,   59,  422,  422,   59,  422,   60,   61,   62,   59,

       60,   61,   62,   59,  422,  422,   59,  349,  342,  342,
      342,  342,  353,  354,   60,   61,   62,  350,   60,   61,
       62,  355,   60,   61,   62,   60,   61,   62,  356,   59,
       60,   61,   62,   59,   60,   61,   62,   60,   61,   62,
      357,   59,  361,  361,  361,  361,   59,  358,  422,   59,
      355,  422,  422,   59,  422,  422,   59,  356,  422,  422,
       60,   61,   62,  422,   60,   61,   62,  362,   59,  357,
      422,   59,   60,   61,   62,  422,  358,   60,   61,   62,
       60,   61,   62,  363,   60,   61,   62,   60,   61,   62,
      368,   59,  367,  422,  422,  422,  362,   59,  422,   60,

       61,   62,   60,   61,   62,  371,  371,  371,  371,   59,
      422,  422,  363,  361,  361,  361,  361,  366,   59,  368,
      422,  367,   60,   61,   62,  372,  373,  422,   60,   61,
       62,  376,   59,  371,  371,  371,  371,   59,  422,  422,
       60,   61,   62,   59,  422,  422,  422,  422,   59,   60,
       61,   62,  422,   59,  372,  373,  422,  422,  422,  422,
      376,  422,  422,   60,   61,   62,  422,  422,   60,   61,
       62,  422,  422,  422,   60,   61,   62,  422,  422,   60,
       61,   62,  422,  422,   60,   61,   62,   54,   54,   54,
       54,   54,   57,   57,   57,   64,   64,   64,   64,   64,

      261,  422,  261,  261,    3,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422

    } ;

static const flex_int16_t yy_chk[2092] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    8,    5,    9,
        9,    9,    9,   11,   14,  491,   14,   14,   14,   14,

       15,   15,   15,   15,   16,   16,  490,   16,   16,   16,
       16,   18,   18,   14,   19,   19,   19,   51,   14,   51,
       16,  489,  488,   64,    9,   17,   17,   54,   17,   17,
       17,   17,   29,   21,    8,   21,  487,   11,  486,   16,
      485,   17,   14,   21,   21,   21,   22,   14,   22,   16,
       16,   21,   21,   22,   21,    9,    9,    9,   69,   23,
       24,   22,  484,   29,   29,   29,   28,   64,   16,   23,
       17,   17,   24,   23,   54,  483,  482,   22,   85,   25,
       27,   70,   22,   25,   26,  481,   85,   69,   28,   24,
      480,   23,   22,   22,   22,   28,  479,   26,   23,   86,

      478,   25,   23,   24,   24,   24,   27,   59,   25,   27,
       70,   86,   25,   26,   30,   33,   33,   33,   33,   28,
       28,   28,   23,   23,   23,   33,  140,   30,   26,   26,
       26,  477,   25,   25,   25,  476,  475,   27,   27,   27,
      474,   33,  141,   30,   31,   31,   31,   31,   32,  473,
       33,   34,  472,  471,   33,  140,   32,   34,   30,   30,
       30,   31,   32,   34,   67,   67,   67,   67,   32,   38,
       33,  141,   59,   38,   32,  203,   59,   32,   59,   31,
       34,   33,   33,   33,  470,   32,   34,  469,  468,  467,
       31,   38,  466,  465,   34,   34,   34,   32,   38,   39,

      251,  464,   38,   37,  203,   32,   32,   32,   37,   57,
       31,   31,   31,   35,  283,   35,   37,   41,   35,   35,
       35,   35,   38,   38,   38,   39,   40,  463,   39,  251,
       37,   35,   37,  462,  461,   41,  305,   37,  460,   40,
       57,   57,   57,  283,   35,  459,   41,   37,   37,   37,
      458,  457,  456,   35,   42,   40,   39,   39,   39,  455,
       35,  324,   42,   43,  454,  305,   41,   41,   41,  453,
       40,   40,   40,   35,   42,  452,   45,   91,  451,   43,
       42,   44,  450,   42,   35,   35,   35,   44,   43,   45,
      324,   42,   43,   44,  449,  448,  447,   42,   45,   43,

      446,   91,  445,   42,   46,   45,   91,  444,   43,  443,
       44,   42,   42,   42,  442,  441,   44,  440,   45,   43,
       43,   43,  439,  438,   44,   44,   44,   46,  437,   45,
       45,   45,   91,   91,   91,   46,   46,   46,   56,  436,
      435,   56,  434,   58,   58,   58,   58,  433,  432,   56,
       56,   66,  430,  429,   66,   68,  428,   68,   68,   68,
       68,  427,   66,   66,   72,   72,   72,   72,  426,  420,
       68,  406,  405,   71,   71,   71,   71,  396,   58,  386,
      375,   73,   73,   73,   73,   56,   71,  286,  261,   56,
      258,  255,  253,   56,   73,  219,  217,   89,   66,   68,

       68,   56,   66,  216,  214,   56,   66,   56,   56,   58,
       58,   58,   89,   92,   66,   71,   71,  211,   66,  210,
       66,   66,   93,   73,   73,   74,   74,   90,   74,   74,
       74,   74,   75,   95,   75,  209,   92,   75,   75,   75,
       75,   74,   92,   89,   89,   89,   95,  201,   90,  199,
       90,  109,  158,  157,  156,   93,   90,  109,  155,  154,
       94,   96,   95,  153,  109,  152,  151,   92,   92,   92,
       74,   74,  150,   94,   96,  149,  138,   95,   95,   95,
       94,   90,   90,   90,  137,   97,   93,   93,   93,   94,
       96,   98,   99,   97,  100,  109,  109,  109,  135,   98,

      134,  123,   94,  113,  101,   96,   96,   96,  103,  100,
      102,   94,   94,   94,   97,   99,   88,   87,   84,  101,
       98,   99,  102,  100,   97,   97,   97,   83,  104,  103,
       98,   98,   98,  101,  113,  113,  113,  103,   82,  102,
      100,  100,  100,  106,   81,  106,   99,   99,   99,  104,
      101,  101,  101,  102,  102,  102,  107,  104,  108,  106,
      103,  103,  103,  105,  105,  105,  105,  105,  110,  107,
      115,   62,  106,  108,  106,  111,  111,  111,  111,  116,
      104,  104,  104,  110,   61,  107,   60,  108,  116,  114,
      106,  106,  106,   52,  114,  115,  112,  110,  105,  115,

      107,  107,  107,  114,  108,  108,  108,   50,  116,   49,
      111,   48,   47,  112,  110,  110,  110,   36,   20,  116,
      116,  116,   10,  114,    7,  112,  115,  115,  115,  105,
      105,  105,    6,    3,  114,  114,  114,  117,  117,  117,
      117,  111,  111,  111,  112,  112,  112,  118,  119,  118,
      119,  120,  121,    0,  120,    0,  144,  119,  121,  144,
      144,  144,  144,  122,    0,  118,  119,    0,    0,  122,
      125,  146,  146,  146,  146,    0,    0,    0,  118,  119,
      120,  121,  124,  126,    0,  120,  120,  120,    0,  121,
      121,  121,  122,  125,  118,  119,  124,    0,  126,  125,

      122,  122,  122,    0,    0,  127,    0,  118,  119,    0,
      128,  130,  126,  124,  124,  124,  128,  130,    0,    0,
      125,  127,  131,  129,  125,  125,  125,  127,  133,  126,
      126,  126,  129,  131,    0,    0,  127,  127,  127,    0,
      130,  128,  128,  128,    0,  163,    0,  129,  130,  130,
      130,    0,  129,  131,  131,  131,    0,    0,  159,  133,
      133,  133,  160,  129,  129,  129,  142,  161,  142,    0,
        0,  142,  142,  142,  142,  145,  145,  145,  145,  147,
      147,  147,  147,  162,  164,    0,    0,  168,  145,  159,
      159,  159,  163,  160,  160,  160,    0,  176,  161,  161,

      161,  166,  164,    0,    0,  162,  175,  175,  175,  175,
      165,  168,  162,  164,  165,    0,  168,  145,  145,  176,
        0,    0,  147,  163,  163,  163,  176,  166,    0,    0,
      166,    0,  170,  164,  164,  164,  162,  162,  162,  165,
      170,  167,  168,  168,  168,  165,  165,  165,  167,  169,
      176,  176,  176,    0,  171,    0,  169,  172,  166,  166,
      166,  170,  171,    0,    0,  172,  205,  205,  205,  205,
      167,  170,  170,  170,  174,  178,    0,    0,  169,  167,
      167,  167,    0,  171,    0,    0,  172,  169,  169,  169,
      173,  173,  174,  171,  171,  171,  172,  172,  172,  179,

      177,    0,    0,  174,  173,  180,  178,  178,  178,    0,
      181,  173,    0,    0,  184,  173,    0,    0,  177,  173,
      173,    0,  183,  174,  174,  174,    0,  180,    0,  177,
      179,  179,  179,  173,  186,    0,  184,  182,    0,    0,
      173,  181,  181,  181,  186,    0,  173,  173,  173,  177,
      177,  177,  182,  183,  183,  183,    0,  185,  180,  180,
      180,    0,    0,  186,  185,    0,  182,  184,  184,  184,
      187,  187,  187,  187,  187,  186,  186,  186,    0,  190,
      189,  195,  193,  182,  182,  182,  185,  189,  191,    0,
      193,  207,  207,  207,  207,  185,  185,  185,  188,    0,

      188,  190,    0,  188,  188,  188,  188,  194,  190,  189,
      191,  193,    0,    0,  194,  197,    0,  191,  189,  189,
      189,  193,  193,  193,  195,    0,    0,    0,  196,    0,
        0,    0,  190,  190,  190,  196,    0,  197,  194,  194,
      194,  191,  191,  191,  197,  198,  206,  206,  206,  206,
      218,  198,  221,  220,  223,  195,  195,  195,    0,  196,
      196,  196,  222,  218,  224,    0,  220,    0,  197,  197,
      197,  222,  225,    0,  221,    0,  198,  198,  198,  218,
      223,  221,  220,  223,    0,    0,  224,  227,    0,  206,
      225,  222,    0,  224,  218,  218,  218,  220,  220,  220,

        0,  225,  222,  222,  222,  221,  221,  221,  228,  227,
      226,  223,  223,  223,  226,  229,  227,  224,  224,  224,
      230,  225,  225,  225,  235,  232,    0,  229,    0,    0,
      228,  234,  234,  234,  234,    0,  231,  228,  230,  226,
      227,  227,  227,  232,  229,  226,  226,  226,  231,  230,
        0,    0,    0,  233,  232,  235,  235,  235,  229,  229,
      229,  228,  228,  228,    0,  231,  233,    0,    0,  230,
      230,  230,  237,    0,  232,  232,  232,  236,  238,  231,
      231,  231,  233,    0,  236,  240,    0,  239,    0,    0,
        0,  240,  241,  241,  241,  241,    0,  233,  233,  233,

      243,  244,    0,  237,  237,  237,  236,  248,    0,  238,
      238,  238,  244,  246,  240,  236,  236,  236,  239,  239,
      239,    0,  240,  240,  240,  242,  242,  242,  242,  245,
      244,  243,  243,  243,  259,  246,  284,  284,  284,  284,
      245,    0,  246,  244,  244,  244,  252,  252,  252,  252,
      248,    0,    0,    0,  252,  263,  262,  259,  245,  325,
      325,  325,  325,  259,  262,    0,  246,  246,  246,  265,
      276,  245,  245,  245,  252,  268,    0,  263,  264,    0,
      264,  248,  248,  248,  263,  262,  266,  265,  259,  259,
      259,    0,  267,  268,    0,  262,  262,  262,  265,  266,

        0,  276,  276,  276,  268,  267,  269,  264,  263,  263,
      263,  264,  264,  264,  272,  266,  270,  269,  265,  265,
      265,  267,    0,  272,  268,  268,  268,  270,  275,    0,
      266,  266,  266,  290,    0,  269,  267,  267,  267,  271,
        0,    0,  271,  272,    0,  270,  275,  273,  269,  269,
      269,    0,    0,  296,  272,  272,  272,  275,  270,  270,
      270,  277,  273,  274,  290,  290,  290,    0,  271,  287,
      274,  278,    0,  271,  271,  271,  273,  275,  275,  275,
      278,    0,    0,  277,  296,  296,  296,  287,    0,    0,
      277,    0,  274,  273,  273,  273,    0,    0,  287,    0,

      278,  274,  274,  274,  288,    0,    0,    0,  288,  289,
        0,  278,  278,  278,  277,  277,  277,  291,  287,  287,
      287,  292,  289,  293,    0,    0,    0,  294,  295,  302,
      291,    0,    0,  288,  294,  297,    0,  295,  289,  288,
      288,  288,    0,    0,  292,    0,  291,  293,    0,    0,
      292,  302,  293,  289,  289,  289,  294,  295,  302,  297,
        0,  291,  291,  291,  297,  294,  294,  294,  295,  295,
      295,  298,    0,  298,  299,  292,  292,  292,  293,  293,
      293,  300,  302,  302,  302,    0,    0,  301,  300,  308,
      297,  297,  297,  299,    0,    0,  301,    0,    0,  310,

      298,    0,  308,  299,  298,  298,  298,    0,    0,  311,
      300,  306,  306,  306,  306,  306,  301,  311,  308,  300,
      300,  300,  309,    0,  299,  299,  299,  301,  301,  301,
      310,  310,  310,  308,  308,  308,  312,  313,  311,  314,
      309,  315,    0,    0,  313,    0,    0,    0,  311,  311,
      311,  309,  316,    0,  312,    0,    0,    0,  314,  317,
        0,    0,    0,  315,  318,  312,  313,  316,  314,    0,
      315,  309,  309,  309,    0,  313,  313,  313,    0,  317,
        0,  316,  318,    0,    0,  312,  312,  312,  317,  314,
      314,  314,    0,  318,  315,  315,  315,  321,  316,  316,

      316,  319,    0,  319,  320,    0,  320,    0,    0,    0,
      317,  317,  317,  318,  318,  318,  327,    0,  329,    0,
      321,  326,    0,  327,    0,    0,  321,  328,    0,    0,
      319,  329,    0,  320,  319,  319,  319,  320,  320,  320,
        0,  326,  332,    0,  330,  327,    0,  329,  331,    0,
      326,  321,  321,  321,  327,  327,  327,  334,  328,  328,
      328,  333,  329,  329,  329,  332,    0,    0,    0,  334,
        0,  332,  326,  326,  326,  330,  330,  330,  335,  331,
      331,  331,    0,  333,  344,    0,  334,  336,  338,    0,
      333,  335,    0,    0,  337,    0,  332,  332,  332,  343,

      334,  334,  334,  344,    0,    0,  338,  335,  342,  342,
      342,  342,  342,  344,  333,  333,  333,  338,  336,  336,
      336,  345,  335,  335,  335,  337,  337,  337,  346,  347,
      343,  343,  343,  349,  344,  344,  344,  338,  338,  338,
      348,  345,  353,  353,  353,  353,  346,  350,    0,  354,
      345,    0,    0,  348,    0,    0,  355,  346,    0,    0,
      347,  347,  347,    0,  349,  349,  349,  356,  357,  348,
        0,  350,  345,  345,  345,    0,  350,  346,  346,  346,
      354,  354,  354,  358,  348,  348,  348,  355,  355,  355,
      363,  356,  362,    0,    0,    0,  356,  363,    0,  357,

      357,  357,  350,  350,  350,  366,  366,  366,  366,  358,
        0,    0,  358,  361,  361,  361,  361,  361,  362,  363,
        0,  362,  356,  356,  356,  367,  368,    0,  363,  363,
      363,  372,  367,  371,  371,  371,  371,  373,    0,    0,
      358,  358,  358,  376,    0,    0,    0,    0,  368,  362,
      362,  362,    0,  372,  367,  368,    0,    0,    0,    0,
      372,    0,    0,  367,  367,  367,    0,    0,  373,  373,
      373,    0,    0,    0,  376,  376,  376,    0,    0,  368,
      368,  368,    0,    0,  372,  372,  372,  423,  423,  423,
      423,  423,  424,  424,  424,  425,  425,  425,  425,  425,

      431,    0,  431,  431,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422

    } ;

static const flex_int16_t yy_rule_linenum[69] =
    {   0,
       32,   33,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,  100,  102
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

# include <cerrno>
# include <climits>
# include <cstdlib>
# include <cstring> // strerror
# include <string>
# include "realm/parser/driver.hpp"
#define YY_NO_UNISTD_H 1
#define YY_NO_INPUT 1



#define INITIAL 0




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif



/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */


/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;






    }; /* end struct yyguts_t */



/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */


    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );



/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif


/* %if-c-only */





/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif


/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */


/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */









extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION


/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;







	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 423 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 422 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */


do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 69 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 69 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 70 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case 3:
YY_RULE_SETUP
return yytext[0];
	YY_BREAK
case 4:
YY_RULE_SETUP
return yy::parser::make_EQUAL  ();
	YY_BREAK
case 5:
YY_RULE_SETUP
return yy::parser::make_IN  (yytext);
	YY_BREAK
case 6:
YY_RULE_SETUP
return yy::parser::make_NOT_EQUAL();
	YY_BREAK
case 7:
YY_RULE_SETUP
return yy::parser::make_LESS   ();
	YY_BREAK
case 8:
YY_RULE_SETUP
return yy::parser::make_GREATER();
	YY_BREAK
case 9:
YY_RULE_SETUP
return yytext[0];
	YY_BREAK
case 10:
YY_RULE_SETUP
return yy::parser::make_LESS_EQUAL ();
	YY_BREAK
case 11:
YY_RULE_SETUP
return yy::parser::make_GREATER_EQUAL ();
	YY_BREAK
case 12:
YY_RULE_SETUP
return yy::parser::make_AND    ();
	YY_BREAK
case 13:
YY_RULE_SETUP
return yy::parser::make_OR     ();
	YY_BREAK
case 14:
YY_RULE_SETUP
return yy::parser::make_NOT();
	YY_BREAK
case 15:
YY_RULE_SETUP
return yy::parser::make_ANY();
	YY_BREAK
case 16:
YY_RULE_SETUP
return yy::parser::make_ALL();
	YY_BREAK
case 17:
YY_RULE_SETUP
return yy::parser::make_NONE();
	YY_BREAK
case 18:
YY_RULE_SETUP
return yy::parser::make_BEGINSWITH(yytext);
	YY_BREAK
case 19:
YY_RULE_SETUP
return yy::parser::make_ENDSWITH(yytext);
	YY_BREAK
case 20:
YY_RULE_SETUP
return yy::parser::make_CONTAINS(yytext);
	YY_BREAK
case 21:
YY_RULE_SETUP
return yy::parser::make_TEXT(yytext);
	YY_BREAK
case 22:
YY_RULE_SETUP
return yy::parser::make_LIKE(yytext);
	YY_BREAK
case 23:
YY_RULE_SETUP
return yy::parser::make_BETWEEN(yytext);
	YY_BREAK
case 24:
YY_RULE_SETUP
return yy::parser::make_GEOWITHIN(yytext);
	YY_BREAK
case 25:
YY_RULE_SETUP
return yy::parser::make_TRUEPREDICATE (); 
	YY_BREAK
case 26:
YY_RULE_SETUP
return yy::parser::make_FALSEPREDICATE (); 
	YY_BREAK
case 27:
YY_RULE_SETUP
return yy::parser::make_SORT(yytext);
	YY_BREAK
case 28:
YY_RULE_SETUP
return yy::parser::make_DISTINCT(yytext);
	YY_BREAK
case 29:
YY_RULE_SETUP
return yy::parser::make_LIMIT(yytext);
	YY_BREAK
case 30:
YY_RULE_SETUP
return yy::parser::make_BINARY(yytext);
	YY_BREAK
case 31:
YY_RULE_SETUP
return yy::parser::make_OBJ(yytext);
	YY_BREAK
case 32:
YY_RULE_SETUP
return yy::parser::make_ASCENDING(yytext);
	YY_BREAK
case 33:
YY_RULE_SETUP
return yy::parser::make_DESCENDING(yytext);
	YY_BREAK
case 34:
YY_RULE_SETUP
return yy::parser::make_SUBQUERY();
	YY_BREAK
case 35:
YY_RULE_SETUP
return yy::parser::make_GEOBOX();
	YY_BREAK
case 36:
YY_RULE_SETUP
return yy::parser::make_GEOPOLYGON();
	YY_BREAK
case 37:
YY_RULE_SETUP
return yy::parser::make_GEOCIRCLE();
	YY_BREAK
case 38:
YY_RULE_SETUP
return yy::parser::make_SIZE(yytext);
	YY_BREAK
case 39:
YY_RULE_SETUP
return yy::parser::make_MAX    ();
	YY_BREAK
case 40:
YY_RULE_SETUP
return yy::parser::make_MIN    ();
	YY_BREAK
case 41:
YY_RULE_SETUP
return yy::parser::make_SUM    ();
	YY_BREAK
case 42:
YY_RULE_SETUP
return yy::parser::make_AVG    ();
	YY_BREAK
case 43:
YY_RULE_SETUP
return yy::parser::make_BACKLINK();
	YY_BREAK
case 44:
YY_RULE_SETUP
return yy::parser::make_TYPE    (yytext);
	YY_BREAK
case 45:
YY_RULE_SETUP
return yy::parser::make_KEY_VAL (yytext);
	YY_BREAK
case 46:
YY_RULE_SETUP
return yy::parser::make_KEY_VAL (yytext);
	YY_BREAK
case 47:
YY_RULE_SETUP
return yy::parser::make_CASE    ();
	YY_BREAK
case 48:
YY_RULE_SETUP
return yy::parser::make_TRUE    ();
	YY_BREAK
case 49:
YY_RULE_SETUP
return yy::parser::make_FALSE    ();
	YY_BREAK
case 50:
YY_RULE_SETUP
return yy::parser::make_INFINITY(yytext);
	YY_BREAK
case 51:
YY_RULE_SETUP
return  yy::parser::make_NAN(yytext);
	YY_BREAK
case 52:
YY_RULE_SETUP
return yy::parser::make_NULL_VAL ();
	YY_BREAK
case 53:
YY_RULE_SETUP
return yy::parser::make_UUID(yytext); 
	YY_BREAK
case 54:
YY_RULE_SETUP
return yy::parser::make_OID(yytext);
	YY_BREAK
case 55:
YY_RULE_SETUP
return yy::parser::make_TIMESTAMP(yytext);
	YY_BREAK
case 56:
YY_RULE_SETUP
return yy::parser::make_LINK (yytext);
	YY_BREAK
case 57:
YY_RULE_SETUP
return yy::parser::make_TYPED_LINK (yytext);
	YY_BREAK
case 58:
YY_RULE_SETUP
return yy::parser::make_NATURAL0 (yytext);
	YY_BREAK
case 59:
YY_RULE_SETUP
return yy::parser::make_ARG(yytext); 
	YY_BREAK
case 60:
YY_RULE_SETUP
return yy::parser::make_NUMBER (yytext);
	YY_BREAK
case 61:
YY_RULE_SETUP
return yy::parser::make_NUMBER (yytext);
	YY_BREAK
case 62:
YY_RULE_SETUP
return yy::parser::make_FLOAT (yytext);
	YY_BREAK
case 63:
YY_RULE_SETUP
return yy::parser::make_FLOAT (yytext);
	YY_BREAK
case 64:
YY_RULE_SETUP
return yy::parser::make_BASE64(yytext);
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
return yy::parser::make_STRING (yytext);
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
return yy::parser::make_STRING (yytext);
	YY_BREAK
case 67:
YY_RULE_SETUP
return yy::parser::make_ID (check_escapes(yytext));
	YY_BREAK
case 68:
YY_RULE_SETUP
{
             throw yy::parser::syntax_error
               ("invalid character: " + std::string(yytext));
           }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
return yy::parser::make_END ();
	YY_BREAK
case 69:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */


/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 423 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 423 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 422);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

    
        b->yy_is_interactive = 0;
    

/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */


/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */


/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */





/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */


/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}


/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */


/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */


/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */


/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */




/* %ok-for-header */




void realm::query_parser::ParserDriver::scan_begin (yyscan_t yyscanner, bool trace_scanning)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = trace_scanning;
    yy_scan_buffer(parse_buffer.data(), int(parse_buffer.size()), yyscanner);
}

