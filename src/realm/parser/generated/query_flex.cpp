#line 2 "query_flex.ll"
#include <stdint.h>



#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */








/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */


#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif













/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */








/* %if-c-only */

/* %endif */




/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */


/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */




/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r



/* %endif */



/* %if-not-reentrant */
/* %endif */







/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */


	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]


/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r


/* %% [1.5] DFA */


/* %if-c-only Standard (non-C++) definition */


static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );


/* %endif */


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[430] =
    {   0,
        0,    0,   71,   69,    1,    2,   14,   69,   68,   69,
       69,    9,    3,    3,    9,   59,   59,    7,    4,    8,
       69,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,    9,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   69,   69,   69,   69,
        1,    2,    6,    0,   66,    0,   68,   60,    0,    0,
        0,    0,   12,    0,   67,    0,    0,   61,    0,    0,
       64,    0,   64,   59,    0,    0,   63,   10,    4,   11,
        0,    0,    0,    0,    0,    0,    0,    0,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,    5,   68,   68,   68,   68,   68,   68,   68,
       68,   57,   68,   13,   68,   68,   68,    0,   68,   68,
       68,   68,   68,    0,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   13,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,   64,    0,   63,
       62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,   12,   15,   31,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   51,    0,   68,   68,
       68,   52,   53,   68,   14,   68,   30,   68,   68,   68,
        0,    0,   68,   68,   68,   48,   68,   68,   68,   68,

       68,   68,   68,   68,    0,    0,    0,    0,   51,   52,
        0,   64,    0,   41,    0,    0,    0,   38,   39,    0,
       40,    0,    0,   68,    0,   68,   68,   68,   32,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   58,
       47,   22,   68,   17,   53,   27,   68,    0,   56,   21,
       49,   68,   68,   68,    0,   68,    0,    0,    0,    0,
        0,   44,    0,   37,   43,    0,   68,   65,    0,   68,
       68,   68,   68,   68,   68,   50,   68,   46,   68,   68,
       68,   68,   68,   29,   68,   68,    0,    0,    0,    0,
        0,    0,   42,    0,   68,   68,   68,   68,   68,   68,

       68,   68,   34,   68,   68,   68,   68,   68,   68,    0,
        0,    0,    0,   45,   68,   68,   23,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,    0,    0,
        0,    0,   68,   68,   20,   68,   28,   19,   68,   68,
       68,   68,   51,   33,   68,    0,    0,   51,    0,   31,
       68,   68,   68,   36,   68,   24,   68,    0,    0,    0,
       18,   32,   68,   35,   68,    0,    0,   56,   68,   68,
        0,    0,    0,   68,   68,    0,    0,   56,   68,   25,
        0,    0,   26,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   55,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,    1,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   48,
       52,   53,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   14,   82,   14,    1,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,    1,    1,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    1,    1,    1,
        1,    1,    2,    1,    3,    1,    2,    4,    4,    4,
        4,    1,    1,    2,    1,    1,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    3,    1,    3,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    3,    3,    3
    } ;

static const flex_int16_t yy_base[499] =
    {   0,
        0,    0,  763, 2060,   85,  758,  735,   82,   72,  741,
       85, 2060, 2060,   79,   83,   90,  111,   88,   92,  724,
       78,  109,  139,  120,  149,  134,  154,  169,   80,  158,
      229,  210,  259,  205,  333,  685,  252,  271,  277,  289,
      312,  352,  356,  374,  370,  183,  654,  652,  649,  644,
      116,  723, 2060,  122, 2060,  455,  223,  413,  297,  627,
      626,  625, 2060,  114, 2060,  465,  196,  449,   99,  132,
      472,  252,  486,  533,  370,    0, 2060, 2060, 2060, 2060,
      628,  633,  627,  620,  121,  115,  601,  624,  296,  484,
      492,  506,  392,  527,  502,  521,  530,  566,  570,  514,

      579,  556,  586,  592,  609,  604,  630,  633,  644,  639,
      653,  615,  410,  318,  668,  694,  660,  466,  727,  742,
      681,  709,  721,  621,  724,  739,  746,  697,  743,  751,
      759,  789,  793,  786, 2060,  763,  591,  583,    0,  565,
      561,    0,  165,  161,  840, 2060,  865,  845,  640,  869,
        0,  581,  562,  542,  552,  541,  541,  522,  533,  514,
      517,  814,  828,  838,  851,  848,  857,  866,  863,  873,
      893,  900,  909,  916,  919,  968,  928,  875,  934,  975,
      963,  923,  938,  958,  946,  998,  984, 1002,  988, 1013,
     1057, 1087, 1043, 1050, 1059, 2060, 1056, 1039, 1062, 1073,

     1085, 1079, 1100, 1096,  499,    0,  498,    0,  177, 2060,
     1154, 1158, 1169, 2060,  510,  498,  497, 2060, 2060,  502,
     2060,  501,  481, 1114,  550, 1151, 1161, 1141, 1164, 1158,
     1154, 1170, 1181, 1205, 1211, 1218, 1222, 1234, 1230, 1241,
     1225, 1240, 1248, 1252, 1259, 1264, 1275, 1321, 1334, 1278,
     1304, 1314, 1327, 1317,    0, 1320,    0,    0,  191, 1389,
      469, 2060,  465, 2060, 2060,  469, 1338, 2060,  521, 1372,
     1383, 1386, 1376, 1379, 1391, 1431, 1436, 1367, 1440, 1450,
     1428, 1453, 1445, 1401, 1480, 1474,    0,    0,    0,    0,
      197, 1358, 2060,  451, 1497, 1492, 1502, 1516, 1521, 1538,

     1544, 1531, 1509, 1550, 1558, 1578, 1572, 1593, 1567,    0,
        0,  242, 1649, 2060, 1619, 1597, 1601, 1639, 1645, 1653,
     1657, 1662, 1673, 1683, 1697, 1700, 1709, 1719,    0,    0,
      247, 1363, 1737, 1745, 1649, 1723, 1726, 1748, 1766, 1775,
     1783, 1786, 1760, 1763, 1821,    0,    0, 2060, 1844, 1804,
     1824, 1840, 1847, 1828, 1851, 1831, 1865,    0,    0, 1375,
     1843, 1868, 1890, 1877, 1911,    0,    0, 1937, 1915, 1894,
        0,    0, 1655, 1919, 1929,    0,    0, 1676, 1956, 1933,
        0,  508, 1937,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  505,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  504,    0,    0,    0,    0,    0,    0,    0,
        0,  504,  498, 2060,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  500, 2060, 2060, 2042,
     2045, 2050,  498,  497,  496,  485,  484, 2054,  477,  475,
      458,  453,  449,  448,  447,  445,  444,  443,  435,  431,
      422,  421,  420,  407,  406,  403,  391,  390,  388,  374,
      365,  363,  356,  355,  346,  336,  335,  331,  324,  321,
      319,  318,  316,  314,  307,  306,  302,  296,  295,  281,
      280,  279,  261,  258,  224,  217,  204,  192,  182,  178,
      172,  159,  137,  133,  120,  118,  103,   92

    } ;

static const flex_int16_t yy_def[499] =
    {   0,
      429,    1,  429,  429,  429,  429,  429,  430,  431,  429,
      432,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  429,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  429,  429,  429,  429,
      429,  429,  429,  430,  429,  429,  431,  431,  429,  429,
      429,  429,  429,  432,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  433,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  429,   35,   35,
      431,  431,  431,  429,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  429,  431,  429,  429,  434,  429,
      429,  435,  429,  429,  429,  429,  429,  429,  429,  429,
      433,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  429,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      429,  429,  431,  431,  431,  429,  431,  431,  431,  431,

      431,  431,  431,  431,  429,  436,  429,  437,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  431,  438,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  429,
      431,  431,  431,  431,  431,  431,  431,  429,  429,  431,
      431,  431,  431,  431,  439,  431,  440,  441,  429,  429,
      429,  429,  429,  429,  429,  429,  431,  429,  438,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  442,  443,  444,  445,
      429,  429,  429,  429,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  446,
      447,  429,  429,  429,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  448,  449,
      429,  429,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  450,  451,  429,  429,  431,
      431,  431,  431,  431,  431,  431,  431,  452,  453,  429,
      431,  431,  431,  431,  431,  454,  455,  429,  431,  431,
      456,  457,  429,  431,  431,  458,  459,  429,  431,  431,
      460,  429,  431,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  429,  470,  471,  472,  473,  474,  475,  476,

      477,  478,  429,  479,  480,  481,  482,  483,  484,  485,
      486,  429,  429,  429,  487,  488,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498,  429,  429,    0,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429

    } ;

static const flex_int16_t yy_nxt[2147] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   12,   14,   15,   13,   16,   17,   17,
       17,    4,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   29,   29,   31,   29,   32,
       33,   29,   29,   29,   34,   35,   29,   29,   29,   29,
       29,   36,    4,   12,   29,   37,   38,   24,   25,   26,
       39,   28,   29,   40,   29,   29,   41,   29,   42,   43,
       29,   29,   29,   44,   45,   46,   29,   29,   29,   29,
       29,   47,    4,   48,   49,   50,   51,   55,   51,   58,
       58,   58,   58,   65,   67,  427,   68,   68,   68,   68,

       71,   71,   71,   71,   72,   73,  426,   74,   74,   74,
       74,   78,   53,   69,   78,   79,   80,   51,   70,   51,
       75,  425,   65,  424,   59,   72,   73,   55,   74,   74,
       74,   74,   59,   81,   56,   82,  423,   66,  143,   76,
      422,   75,   69,   83,   84,   85,   89,   70,   90,   75,
       77,   86,   87,   91,   88,   60,   61,   62,  144,   93,
       95,   59,  421,   60,   61,   62,   66,  143,   76,   94,
       75,   77,   59,   98,   56,  420,  156,   92,  158,   96,
       99,  419,   91,   97,  157,  418,   59,  144,  100,   95,
      159,   59,   60,   61,   62,  417,  209,  103,   94,  102,

      210,   59,   98,   60,   61,   62,   59,  416,   96,  101,
       59,  259,   97,   71,   71,   71,   71,   60,   61,   62,
      413,   59,   60,   61,   62,  209,  104,  412,  102,  210,
      291,  312,   60,   61,   62,   59,  108,   60,   61,   62,
      259,   60,   61,   62,  109,  115,  105,  105,  105,  105,
      110,  116,   60,   61,   62,  106,  111,   59,  134,  291,
      312,  411,   59,  107,  410,  108,   60,   61,   62,  147,
      147,  147,  147,  109,  117,   59,  112,  112,  112,  112,
      116,   59,  409,  408,  407,  111,  113,  331,   60,   61,
       62,   92,  107,   60,   61,   62,   91,  348,  406,  404,

       57,   94,  114,  101,   59,  403,   60,   61,   62,  402,
      401,   59,   60,   61,   62,  113,  331,  400,  125,  399,
      126,  398,  397,   59,  396,   91,  348,  394,  104,   59,
       94,  114,  127,  162,  393,   60,   61,   62,  392,  391,
      128,   59,   60,   61,   62,  118,  107,  119,   59,  390,
      120,  120,  120,  120,   60,   61,   62,  103,  389,  388,
       60,   61,   62,  121,   59,   57,  387,  129,  386,   57,
       59,   57,   60,   61,   62,  107,  122,  384,  108,   60,
       61,   62,  149,  113,  149,   59,  109,  150,  150,  150,
      150,  382,  121,  381,  377,   60,   61,   62,  111,  114,

      121,   60,   61,   62,   59,  123,  376,  108,   59,  372,
      371,  166,  113,  123,  117,  109,   60,   61,   62,  131,
      116,  130,   59,  367,  366,  359,   59,  111,  114,  121,
       58,   58,   58,   58,  358,   60,   61,   62,  347,   60,
       61,   62,  133,  132,   59,  187,  346,  330,  329,  116,
       64,   54,  311,   60,   61,   62,  310,   60,   61,   62,
       54,  290,   59,   54,   73,   59,   68,   68,   68,   68,
       64,   54,   54,   64,  187,   60,   61,   62,  289,   75,
      287,   64,   64,  191,  191,  191,  191,  258,  257,   71,
       71,   71,   71,   60,   61,   62,   60,   61,   62,  208,

      206,  151,  145,  148,  148,  148,  148,   54,   75,   77,
      428,   54,  415,  163,  414,   54,  145,   64,  405,  395,
      165,   64,  385,   54,  314,   64,  268,   54,  294,   54,
      139,  145,  146,   64,  164,  163,   59,   64,  293,   64,
      142,  169,  163,  264,   59,  145,  146,   72,   73,  165,
       74,   74,   74,   74,   59,  268,  266,  175,   59,  167,
      265,  264,  263,   75,  163,  170,   59,   60,   61,   62,
      169,  262,  168,   59,  171,   60,   61,   62,  261,   59,
       57,  136,   59,  223,  222,   60,   61,   62,  167,   60,
       61,   62,   75,   77,  170,  172,  176,   60,   61,   62,

      221,  168,  220,  171,   60,   61,   62,  173,   59,  219,
       60,   61,   62,   60,   61,   62,  174,  177,   59,  218,
      217,  216,   59,  177,  172,  176,  105,  105,  105,  105,
      178,   59,  112,  112,  112,  112,  174,  215,   59,   60,
       61,   62,  214,  207,   59,  174,  177,   57,  179,   60,
       61,   62,  177,   60,   61,   62,   59,  150,  150,  150,
      150,   59,   60,   61,   62,  205,  180,   59,  181,   60,
       61,   62,  182,  136,  196,   60,   61,   62,  184,  161,
      160,  183,   59,  155,  185,   59,  154,   60,   61,   62,
      186,   59,   60,   61,   62,  180,   59,  181,   60,   61,

       62,  182,  153,  189,  152,   59,  188,  141,  140,   57,
      183,  189,   59,   60,   61,   62,   60,   61,   62,  186,
       59,  190,   60,   61,   62,   52,  138,   60,   61,   62,
      193,  137,  189,   59,  136,  135,   60,   61,   62,  429,
      189,   57,  124,   60,   61,   62,   59,   80,   63,   59,
      190,   60,   61,   62,  429,  194,   57,   57,   53,  193,
       52,   59,  429,  192,   60,   61,   62,  195,  163,  198,
       57,  429,   57,   59,  429,  429,   59,   60,   61,   62,
       60,   61,   62,  174,  195,   57,   57,  429,  429,  429,
      162,   59,   60,   61,   62,   59,  195,  163,   59,   57,

      429,   57,  429,   59,   60,   61,   62,   60,   61,   62,
      429,   59,  197,  429,   57,   59,  199,  201,  164,  200,
      429,  429,   60,   61,   62,  185,   60,   61,   62,   60,
       61,   62,  189,  429,   60,   61,   62,  429,   59,  195,
      429,   59,   60,   61,   62,   59,   60,   61,   62,  204,
      429,  429,  211,  225,  211,  429,  202,  212,  212,  212,
      212,  189,  148,  148,  148,  148,   59,  429,  203,   60,
       61,   62,   60,   61,   62,  145,   60,   61,   62,  213,
       59,  224,  147,  147,  147,  147,  150,  150,  150,  150,
       59,  226,  240,  240,  240,  240,  429,   60,   61,   62,

       59,  229,  429,   59,  145,  146,  429,  429,  228,   59,
      224,   60,   61,   62,  227,   59,  429,  429,   59,  429,
      226,   60,   61,   62,  429,   59,  429,  429,  429,   77,
      229,   60,   61,   62,   60,   61,   62,  228,  230,  429,
       60,   61,   62,  227,  231,   59,   60,   61,   62,   60,
       61,   62,   59,  232,  429,  429,   60,   61,   62,  429,
      233,   59,  239,  234,  429,  429,  429,  230,   59,  429,
      429,   59,  429,  231,  429,   59,   60,   61,   62,  241,
       59,  429,  233,   60,   61,   62,   59,  429,  244,  233,
       59,  239,   60,   61,   62,  235,  236,  243,   59,   60,

       61,   62,   60,   61,   62,  242,   60,   61,   62,  237,
       59,   60,   61,   62,  429,   59,  238,   60,   61,   62,
       59,   60,   61,   62,  235,  236,  243,   59,  429,   60,
       61,   62,  164,  246,  242,  245,   59,  429,  237,  429,
       59,   60,   61,   62,  429,  238,   60,   61,   62,  429,
       59,   60,   61,   62,   59,  247,  429,  429,   60,   61,
       62,  429,  246,  429,  245,   59,  429,   60,   61,   62,
      429,   60,   61,   62,  191,  191,  191,  191,  192,  429,
      251,   60,   61,   62,  247,   60,   61,   62,  250,  252,
      429,   59,  429,  429,  255,   59,   60,   61,   62,  248,

      233,  248,   59,  429,  249,  249,  249,  249,   59,  252,
      429,   59,  254,  429,   59,  429,  429,  250,  252,  429,
      429,  429,   60,   61,   62,   59,   60,   61,   62,  253,
      252,   59,  244,   60,   61,   62,  241,   59,  164,   60,
       61,   62,   60,   61,   62,   60,   61,   62,   59,  429,
      429,  429,   59,  267,  256,  429,   60,   61,   62,  251,
      429,  429,   60,   61,   62,  429,   59,  272,   60,   61,
       62,  212,  212,  212,  212,  212,  212,  212,  212,   60,
       61,   62,  267,   60,   61,   62,  260,  260,  260,  260,
      270,  271,  274,   59,  273,  429,  272,   60,   61,   62,

      276,  429,  275,   59,  429,  429,   59,  429,  429,  429,
       59,  277,  429,   59,  429,  429,   59,  429,  146,  270,
      271,  274,   59,  273,   60,   61,   62,  429,  429,  277,
      429,  275,  429,   59,   60,   61,   62,   60,   61,   62,
      277,   60,   61,   62,   60,   61,   62,   60,   61,   62,
      278,  279,  280,   60,   61,   62,  429,   59,  240,  240,
      240,  240,  281,   59,   60,   61,   62,  429,  282,  283,
       59,  429,  429,  429,   59,  429,  429,   59,  429,  429,
      279,  280,   59,  429,  429,  429,   59,  429,   60,   61,
       62,  281,   59,  284,   60,   61,   62,  282,  283,  429,

       59,   60,   61,   62,   59,   60,   61,   62,   60,   61,
       62,   59,  429,   60,   61,   62,   59,   60,   61,   62,
      429,  285,  284,   60,   61,   62,  429,   59,  429,  288,
       59,   60,   61,   62,  429,   60,   61,   62,  249,  249,
      249,  249,   60,   61,   62,  286,  429,   60,   61,   62,
      285,  249,  249,  249,  249,  286,   59,  277,   60,   61,
       62,   60,   61,   62,  429,  429,   59,  295,  429,   59,
      429,  429,   59,  429,  286,  313,  313,  313,  313,   59,
      349,  349,  349,  349,  286,  429,  276,   60,   61,   62,
       59,  278,  368,  368,  368,  368,  295,   60,   61,   62,

       60,   61,   62,   60,   61,   62,  260,  260,  260,  260,
       60,   61,   62,  297,  292,  299,  296,  429,  300,   59,
      298,   60,   61,   62,   59,  301,  429,  429,   59,  429,
      429,   59,  429,  429,  292,   59,  429,  429,   59,  429,
      429,  429,  297,   59,  299,  296,  429,  300,  429,  298,
       60,   61,   62,   59,  301,   60,   61,   62,  429,   60,
       61,   62,   60,   61,   62,  305,   60,   61,   62,   60,
       61,   62,  302,  429,   60,   61,   62,  302,  429,  307,
       59,  429,  429,   59,   60,   61,   62,  429,   59,  303,
      429,  429,   59,  304,  305,  429,  429,   59,  306,  429,

      429,  302,   59,  429,  429,   59,  302,  429,  307,  429,
      308,   60,   61,   62,   60,   61,   62,  309,  303,   60,
       61,   62,  304,   60,   61,   62,   59,  306,   60,   61,
       62,  315,   59,   60,   61,   62,   60,   61,   62,  308,
      316,  317,  429,  429,   59,  429,  309,  429,  429,   59,
      319,  429,  429,  429,   59,  318,  429,   60,   61,   62,
      315,   59,  429,   60,   61,   62,  320,  429,   59,  316,
      317,  429,  429,   59,  322,   60,   61,   62,  323,  319,
       60,   61,   62,   59,  318,   60,   61,   62,  429,  321,
       59,  429,   60,   61,   62,  320,   59,  328,  429,   60,

       61,   62,   59,  322,   60,   61,   62,  323,  324,  429,
       59,  325,  429,  429,   60,   61,   62,  326,  321,   59,
      429,   60,   61,   62,   59,  429,  328,   60,   61,   62,
       59,  334,  429,   60,   61,   62,  327,  324,  429,  429,
      325,   60,   61,   62,  429,   59,  326,  429,  429,   59,
       60,   61,   62,   59,  429,   60,   61,   62,  333,  429,
      334,   60,   61,   62,  429,  327,  313,  313,  313,  313,
      332,   59,  378,  378,  378,  378,   60,   61,   62,  336,
       60,   61,   62,  335,   60,   61,   62,  333,  429,  429,
      338,   59,  339,  378,  378,  378,  378,   59,  337,  429,

      429,   59,   60,   61,   62,   59,  429,  429,  336,   59,
      340,  429,  335,  429,   59,  341,  429,  429,  429,  338,
      429,  339,   60,   61,   62,   59,  429,  337,   60,   61,
       62,  342,   60,   61,   62,   59,   60,   61,   62,  340,
       60,   61,   62,  429,  341,   60,   61,   62,  345,   59,
      343,  429,   59,  429,  429,  429,   60,   61,   62,  344,
      342,   59,  352,  429,  429,  429,   60,   61,   62,  350,
      429,   59,  429,  429,  429,   59,  429,  345,   59,  343,
       60,   61,   62,   60,   61,   62,  429,  429,  344,   59,
      351,  352,   60,   61,   62,  353,  429,   59,  350,  429,

       59,  429,   60,   61,   62,  354,   60,   61,   62,   60,
       61,   62,   59,  429,  429,   59,  429,  429,   59,  351,
       60,   61,   62,  355,  353,  356,  429,   59,   60,   61,
       62,   60,   61,   62,  354,   59,  429,  429,   59,  429,
      429,  429,  429,   60,   61,   62,   60,   61,   62,   60,
       61,   62,  355,  429,  356,  357,   59,  361,   60,   61,
       62,  349,  349,  349,  349,  360,   60,   61,   62,   60,
       61,   62,  362,   59,  429,  429,   59,  429,  429,  429,
       59,  363,  429,   59,  357,  429,  361,   60,   61,   62,
      364,  429,   59,  365,  429,   59,  429,  429,  429,   59,

      429,  362,  429,   59,   60,   61,   62,   60,   61,   62,
      363,   60,   61,   62,   60,   61,   62,   59,  369,  364,
       59,  429,  365,   60,   61,   62,   60,   61,   62,   59,
       60,   61,   62,  429,   60,   61,   62,  370,  429,  375,
      429,  374,   59,  429,  429,  429,   59,  369,   60,   61,
       62,   60,   61,   62,  368,  368,  368,  368,  373,  380,
       60,   61,   62,   59,  379,  429,  370,   59,  375,  429,
      374,   59,  429,   60,   61,   62,  429,   60,   61,   62,
      429,   59,  429,  429,  429,   59,  383,  429,  380,   59,
      429,  429,  429,  379,   60,   61,   62,  429,   60,   61,

       62,  429,   60,   61,   62,  429,  429,  429,   59,  429,
      429,  429,   60,   61,   62,  383,   60,   61,   62,  429,
       60,   61,   62,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,   60,
       61,   62,   54,   54,   54,   54,   54,   57,   57,   57,
       64,   64,   64,   64,   64,  269,  429,  269,  269,    3,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429
    } ;

static const flex_int16_t yy_chk[2147] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    8,    5,    9,
        9,    9,    9,   11,   14,  498,   14,   14,   14,   14,

       15,   15,   15,   15,   16,   16,  497,   16,   16,   16,
       16,   18,   18,   14,   19,   19,   19,   51,   14,   51,
       16,  496,   64,  495,    9,   17,   17,   54,   17,   17,
       17,   17,   29,   21,    8,   21,  494,   11,   69,   16,
      493,   17,   14,   21,   21,   21,   22,   14,   22,   16,
       16,   21,   21,   22,   21,    9,    9,    9,   70,   23,
       24,   22,  492,   29,   29,   29,   64,   69,   16,   23,
       17,   17,   24,   26,   54,  491,   85,   22,   86,   25,
       27,  490,   22,   25,   85,  489,   26,   70,   27,   24,
       86,   23,   22,   22,   22,  488,  143,   30,   23,   28,

      144,   25,   26,   24,   24,   24,   27,  487,   25,   27,
       30,  209,   25,   67,   67,   67,   67,   26,   26,   26,
      486,   28,   23,   23,   23,  143,   30,  485,   28,  144,
      259,  291,   25,   25,   25,   46,   32,   27,   27,   27,
      209,   30,   30,   30,   32,   34,   31,   31,   31,   31,
       32,   34,   28,   28,   28,   31,   32,   34,   46,  259,
      291,  484,   32,   31,  483,   32,   46,   46,   46,   72,
       72,   72,   72,   32,   34,   57,   33,   33,   33,   33,
       34,   31,  482,  481,  480,   32,   33,  312,   34,   34,
       34,   37,   31,   32,   32,   32,   37,  331,  479,  478,

       59,   38,   33,   39,   37,  477,   57,   57,   57,  476,
      475,   33,   31,   31,   31,   33,  312,  474,   37,  473,
       37,  472,  471,   38,  470,   37,  331,  469,   40,   39,
       38,   33,   39,   89,  468,   37,   37,   37,  467,  466,
       39,   40,   33,   33,   33,   35,   41,   35,   89,  465,
       35,   35,   35,   35,   38,   38,   38,   40,  464,  463,
       39,   39,   39,   35,   41,   59,  462,   41,  461,   59,
      114,   59,   40,   40,   40,   41,   35,  460,   42,   89,
       89,   89,   75,   43,   75,   35,   42,   75,   75,   75,
       75,  459,   35,  458,  457,   41,   41,   41,   42,   43,

       45,  114,  114,  114,   42,   35,  456,   42,   43,  455,
      454,   93,   43,   45,   44,   42,   35,   35,   35,   43,
       44,   42,   45,  453,  452,  451,   44,   42,   43,   45,
       58,   58,   58,   58,  450,   42,   42,   42,  449,   43,
       43,   43,   45,   44,   93,  113,  448,  447,  446,   44,
      445,  444,  443,   45,   45,   45,  442,   44,   44,   44,
       56,  441,  113,   56,   68,   58,   68,   68,   68,   68,
       66,   56,   56,   66,  113,   93,   93,   93,  440,   68,
      439,   66,   66,  118,  118,  118,  118,  437,  436,   71,
       71,   71,   71,  113,  113,  113,   58,   58,   58,  435,

      434,  433,   71,   73,   73,   73,   73,   56,   68,   68,
      427,   56,  413,   90,  412,   56,   73,   66,  403,  393,
       91,   66,  382,   56,  294,   66,  269,   56,  266,   56,
       56,   71,   71,   66,   90,   92,   90,   66,  263,   66,
       66,   95,   90,  261,   91,   73,   73,   74,   74,   91,
       74,   74,   74,   74,   95,  225,  223,  100,   92,   94,
      222,  220,  217,   74,   92,   96,  100,   90,   90,   90,
       95,  216,   94,   96,   97,   91,   91,   91,  215,   94,
      207,  205,   97,  161,  160,   95,   95,   95,   94,   92,
       92,   92,   74,   74,   96,   98,  102,  100,  100,  100,

      159,   94,  158,   97,   96,   96,   96,   99,  102,  157,
       94,   94,   94,   97,   97,   97,  101,  103,   98,  156,
      155,  154,   99,  104,   98,  102,  105,  105,  105,  105,
      105,  101,  112,  112,  112,  112,   99,  153,  103,  102,
      102,  102,  152,  141,  104,  101,  103,  140,  106,   98,
       98,   98,  104,   99,   99,   99,  106,  149,  149,  149,
      149,  105,  101,  101,  101,  138,  107,  112,  107,  103,
      103,  103,  108,  137,  124,  104,  104,  104,  110,   88,
       87,  109,  107,   84,  110,  108,   83,  106,  106,  106,
      111,  110,  105,  105,  105,  107,  109,  107,  112,  112,

      112,  108,   82,  117,   81,  111,  115,   62,   61,   60,
      109,  115,  117,  107,  107,  107,  108,  108,  108,  111,
      115,  116,  110,  110,  110,   52,   50,  109,  109,  109,
      121,   49,  117,  121,   48,   47,  111,  111,  111,  119,
      115,  119,   36,  117,  117,  117,  116,   20,   10,  128,
      116,  115,  115,  115,  120,  122,  120,  119,    7,  121,
        6,  122,    3,  120,  121,  121,  121,  123,  126,  128,
      119,    0,  120,  123,    0,    0,  125,  116,  116,  116,
      128,  128,  128,  127,  122,  120,  119,    0,    0,    0,
      125,  126,  122,  122,  122,  129,  123,  126,  127,  119,

        0,  120,    0,  130,  123,  123,  123,  125,  125,  125,
        0,  131,  127,    0,  120,  136,  129,  131,  126,  130,
        0,    0,  126,  126,  126,  130,  129,  129,  129,  127,
      127,  127,  132,    0,  130,  130,  130,    0,  134,  133,
        0,  132,  131,  131,  131,  133,  136,  136,  136,  134,
        0,    0,  145,  166,  145,    0,  132,  145,  145,  145,
      145,  132,  148,  148,  148,  148,  162,    0,  133,  134,
      134,  134,  132,  132,  132,  148,  133,  133,  133,  147,
      163,  165,  147,  147,  147,  147,  150,  150,  150,  150,
      164,  167,  178,  178,  178,  178,    0,  162,  162,  162,

      166,  170,    0,  165,  148,  148,    0,    0,  169,  167,
      165,  163,  163,  163,  168,  169,    0,    0,  168,    0,
      167,  164,  164,  164,    0,  170,    0,    0,    0,  150,
      170,  166,  166,  166,  165,  165,  165,  169,  171,    0,
      167,  167,  167,  168,  172,  171,  169,  169,  169,  168,
      168,  168,  172,  173,    0,    0,  170,  170,  170,    0,
      174,  173,  177,  175,    0,    0,    0,  171,  174,    0,
        0,  175,    0,  172,    0,  182,  171,  171,  171,  179,
      177,    0,  173,  172,  172,  172,  179,    0,  184,  174,
      183,  177,  173,  173,  173,  176,  176,  181,  185,  174,

      174,  174,  175,  175,  175,  180,  182,  182,  182,  176,
      184,  177,  177,  177,    0,  181,  176,  179,  179,  179,
      176,  183,  183,  183,  176,  176,  181,  180,    0,  185,
      185,  185,  188,  189,  180,  186,  187,    0,  176,    0,
      189,  184,  184,  184,    0,  176,  181,  181,  181,    0,
      186,  176,  176,  176,  188,  190,    0,    0,  180,  180,
      180,    0,  189,    0,  186,  190,    0,  187,  187,  187,
        0,  189,  189,  189,  191,  191,  191,  191,  191,    0,
      194,  186,  186,  186,  190,  188,  188,  188,  193,  195,
        0,  198,    0,    0,  201,  193,  190,  190,  190,  192,

      197,  192,  194,    0,  192,  192,  192,  192,  197,  194,
        0,  195,  198,    0,  199,    0,    0,  193,  195,    0,
        0,    0,  198,  198,  198,  200,  193,  193,  193,  197,
      203,  202,  200,  194,  194,  194,  199,  201,  202,  197,
      197,  197,  195,  195,  195,  199,  199,  199,  204,    0,
        0,    0,  203,  224,  204,    0,  200,  200,  200,  203,
        0,    0,  202,  202,  202,    0,  224,  228,  201,  201,
      201,  211,  211,  211,  211,  212,  212,  212,  212,  204,
      204,  204,  224,  203,  203,  203,  213,  213,  213,  213,
      226,  227,  230,  228,  229,    0,  228,  224,  224,  224,

      232,    0,  231,  226,    0,    0,  231,    0,    0,    0,
      230,  233,    0,  227,    0,    0,  229,    0,  212,  226,
      227,  230,  232,  229,  228,  228,  228,    0,    0,  232,
        0,  231,    0,  233,  226,  226,  226,  231,  231,  231,
      233,  230,  230,  230,  227,  227,  227,  229,  229,  229,
      234,  235,  236,  232,  232,  232,    0,  234,  240,  240,
      240,  240,  237,  235,  233,  233,  233,    0,  238,  239,
      236,    0,    0,    0,  237,    0,    0,  241,    0,    0,
      235,  236,  239,    0,    0,    0,  238,    0,  234,  234,
      234,  237,  242,  243,  235,  235,  235,  238,  239,    0,

      243,  236,  236,  236,  244,  237,  237,  237,  241,  241,
      241,  245,    0,  239,  239,  239,  246,  238,  238,  238,
        0,  247,  243,  242,  242,  242,    0,  247,    0,  256,
      250,  243,  243,  243,    0,  244,  244,  244,  248,  248,
      248,  248,  245,  245,  245,  251,    0,  246,  246,  246,
      247,  249,  249,  249,  249,  252,  251,  253,  247,  247,
      247,  250,  250,  250,    0,    0,  252,  267,    0,  254,
        0,    0,  256,    0,  251,  292,  292,  292,  292,  253,
      332,  332,  332,  332,  252,    0,  253,  251,  251,  251,
      267,  254,  360,  360,  360,  360,  267,  252,  252,  252,

      254,  254,  254,  256,  256,  256,  260,  260,  260,  260,
      253,  253,  253,  271,  260,  273,  270,    0,  274,  278,
      272,  267,  267,  267,  270,  275,    0,    0,  273,    0,
        0,  274,    0,    0,  260,  271,    0,    0,  272,    0,
        0,    0,  271,  275,  273,  270,    0,  274,    0,  272,
      278,  278,  278,  284,  275,  270,  270,  270,    0,  273,
      273,  273,  274,  274,  274,  281,  271,  271,  271,  272,
      272,  272,  276,    0,  275,  275,  275,  277,    0,  283,
      281,    0,    0,  276,  284,  284,  284,    0,  277,  279,
        0,    0,  279,  280,  281,    0,    0,  283,  282,    0,

        0,  276,  280,    0,    0,  282,  277,    0,  283,    0,
      285,  281,  281,  281,  276,  276,  276,  286,  279,  277,
      277,  277,  280,  279,  279,  279,  286,  282,  283,  283,
      283,  295,  285,  280,  280,  280,  282,  282,  282,  285,
      296,  297,    0,    0,  296,    0,  286,    0,    0,  295,
      299,    0,    0,    0,  297,  298,    0,  286,  286,  286,
      295,  303,    0,  285,  285,  285,  300,    0,  298,  296,
      297,    0,    0,  299,  302,  296,  296,  296,  304,  299,
      295,  295,  295,  302,  298,  297,  297,  297,    0,  301,
      300,    0,  303,  303,  303,  300,  301,  309,    0,  298,

      298,  298,  304,  302,  299,  299,  299,  304,  305,    0,
      305,  306,    0,    0,  302,  302,  302,  307,  301,  309,
        0,  300,  300,  300,  307,    0,  309,  301,  301,  301,
      306,  316,    0,  304,  304,  304,  308,  305,    0,    0,
      306,  305,  305,  305,    0,  308,  307,    0,    0,  316,
      309,  309,  309,  317,    0,  307,  307,  307,  315,    0,
      316,  306,  306,  306,    0,  308,  313,  313,  313,  313,
      313,  315,  373,  373,  373,  373,  308,  308,  308,  319,
      316,  316,  316,  318,  317,  317,  317,  315,    0,    0,
      321,  318,  322,  378,  378,  378,  378,  319,  320,    0,

        0,  335,  315,  315,  315,  320,    0,    0,  319,  321,
      323,    0,  318,    0,  322,  324,    0,    0,    0,  321,
        0,  322,  318,  318,  318,  323,    0,  320,  319,  319,
      319,  325,  335,  335,  335,  324,  320,  320,  320,  323,
      321,  321,  321,    0,  324,  322,  322,  322,  328,  325,
      326,    0,  326,    0,    0,    0,  323,  323,  323,  327,
      325,  327,  336,    0,    0,    0,  324,  324,  324,  333,
        0,  328,    0,    0,    0,  336,    0,  328,  337,  326,
      325,  325,  325,  326,  326,  326,    0,    0,  327,  333,
      334,  336,  327,  327,  327,  339,    0,  334,  333,    0,

      338,    0,  328,  328,  328,  340,  336,  336,  336,  337,
      337,  337,  343,    0,    0,  344,    0,    0,  339,  334,
      333,  333,  333,  341,  339,  342,    0,  340,  334,  334,
      334,  338,  338,  338,  340,  341,    0,    0,  342,    0,
        0,    0,    0,  343,  343,  343,  344,  344,  344,  339,
      339,  339,  341,    0,  342,  345,  350,  351,  340,  340,
      340,  349,  349,  349,  349,  349,  341,  341,  341,  342,
      342,  342,  352,  345,    0,    0,  351,    0,    0,    0,
      354,  353,    0,  356,  345,    0,  351,  350,  350,  350,
      355,    0,  352,  357,    0,  361,    0,    0,    0,  353,

        0,  352,    0,  355,  345,  345,  345,  351,  351,  351,
      353,  354,  354,  354,  356,  356,  356,  357,  363,  355,
      362,    0,  357,  352,  352,  352,  361,  361,  361,  364,
      353,  353,  353,    0,  355,  355,  355,  365,    0,  370,
        0,  369,  363,    0,    0,    0,  370,  363,  357,  357,
      357,  362,  362,  362,  368,  368,  368,  368,  368,  375,
      364,  364,  364,  365,  374,    0,  365,  369,  370,    0,
      369,  374,    0,  363,  363,  363,    0,  370,  370,  370,
        0,  375,    0,    0,    0,  380,  379,    0,  375,  383,
        0,    0,    0,  374,  365,  365,  365,    0,  369,  369,

      369,    0,  374,  374,  374,    0,    0,    0,  379,    0,
        0,    0,  375,  375,  375,  379,  380,  380,  380,    0,
      383,  383,  383,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  379,
      379,  379,  430,  430,  430,  430,  430,  431,  431,  431,
      432,  432,  432,  432,  432,  438,    0,  438,  438,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429
    } ;

static const flex_int16_t yy_rule_linenum[70] =
    {   0,
       32,   33,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,   99,  100,  102
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

# include <cerrno>
# include <climits>
# include <cstdlib>
# include <cstring> // strerror
# include <string>
# include "realm/parser/driver.hpp"
#define YY_NO_UNISTD_H 1
#define YY_NO_INPUT 1



#define INITIAL 0




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif



/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */


/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;






    }; /* end struct yyguts_t */



/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */


    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );



/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif


/* %if-c-only */





/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif


/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */


/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */









extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION


/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;







	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 430 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 429 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */


do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 70 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 70 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 71 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case 3:
YY_RULE_SETUP
return yytext[0];
	YY_BREAK
case 4:
YY_RULE_SETUP
return yy::parser::make_EQUAL  ();
	YY_BREAK
case 5:
YY_RULE_SETUP
return yy::parser::make_IN  (yytext);
	YY_BREAK
case 6:
YY_RULE_SETUP
return yy::parser::make_NOT_EQUAL();
	YY_BREAK
case 7:
YY_RULE_SETUP
return yy::parser::make_LESS   ();
	YY_BREAK
case 8:
YY_RULE_SETUP
return yy::parser::make_GREATER();
	YY_BREAK
case 9:
YY_RULE_SETUP
return yytext[0];
	YY_BREAK
case 10:
YY_RULE_SETUP
return yy::parser::make_LESS_EQUAL ();
	YY_BREAK
case 11:
YY_RULE_SETUP
return yy::parser::make_GREATER_EQUAL ();
	YY_BREAK
case 12:
YY_RULE_SETUP
return yy::parser::make_AND    ();
	YY_BREAK
case 13:
YY_RULE_SETUP
return yy::parser::make_OR     ();
	YY_BREAK
case 14:
YY_RULE_SETUP
return yy::parser::make_NOT();
	YY_BREAK
case 15:
YY_RULE_SETUP
return yy::parser::make_ANY();
	YY_BREAK
case 16:
YY_RULE_SETUP
return yy::parser::make_ALL();
	YY_BREAK
case 17:
YY_RULE_SETUP
return yy::parser::make_NONE();
	YY_BREAK
case 18:
YY_RULE_SETUP
return yy::parser::make_BEGINSWITH(yytext);
	YY_BREAK
case 19:
YY_RULE_SETUP
return yy::parser::make_ENDSWITH(yytext);
	YY_BREAK
case 20:
YY_RULE_SETUP
return yy::parser::make_CONTAINS(yytext);
	YY_BREAK
case 21:
YY_RULE_SETUP
return yy::parser::make_TEXT(yytext);
	YY_BREAK
case 22:
YY_RULE_SETUP
return yy::parser::make_LIKE(yytext);
	YY_BREAK
case 23:
YY_RULE_SETUP
return yy::parser::make_BETWEEN(yytext);
	YY_BREAK
case 24:
YY_RULE_SETUP
return yy::parser::make_GEOWITHIN(yytext);
	YY_BREAK
case 25:
YY_RULE_SETUP
return yy::parser::make_TRUEPREDICATE (); 
	YY_BREAK
case 26:
YY_RULE_SETUP
return yy::parser::make_FALSEPREDICATE (); 
	YY_BREAK
case 27:
YY_RULE_SETUP
return yy::parser::make_SORT(yytext);
	YY_BREAK
case 28:
YY_RULE_SETUP
return yy::parser::make_DISTINCT(yytext);
	YY_BREAK
case 29:
YY_RULE_SETUP
return yy::parser::make_LIMIT(yytext);
	YY_BREAK
case 30:
YY_RULE_SETUP
return yy::parser::make_OBJ(yytext);
	YY_BREAK
case 31:
YY_RULE_SETUP
return yy::parser::make_ASCENDING(yytext);
	YY_BREAK
case 32:
YY_RULE_SETUP
return yy::parser::make_DESCENDING(yytext);
	YY_BREAK
case 33:
YY_RULE_SETUP
return yy::parser::make_SUBQUERY();
	YY_BREAK
case 34:
YY_RULE_SETUP
return yy::parser::make_GEOBOX();
	YY_BREAK
case 35:
YY_RULE_SETUP
return yy::parser::make_GEOPOLYGON();
	YY_BREAK
case 36:
YY_RULE_SETUP
return yy::parser::make_GEOCIRCLE();
	YY_BREAK
case 37:
YY_RULE_SETUP
return yy::parser::make_SIZE(yytext);
	YY_BREAK
case 38:
YY_RULE_SETUP
return yy::parser::make_MAX    ();
	YY_BREAK
case 39:
YY_RULE_SETUP
return yy::parser::make_MIN    ();
	YY_BREAK
case 40:
YY_RULE_SETUP
return yy::parser::make_SUM    ();
	YY_BREAK
case 41:
YY_RULE_SETUP
return yy::parser::make_AVG    ();
	YY_BREAK
case 42:
YY_RULE_SETUP
return yy::parser::make_BACKLINK(yytext);
	YY_BREAK
case 43:
YY_RULE_SETUP
return yy::parser::make_TYPE    (yytext);
	YY_BREAK
case 44:
YY_RULE_SETUP
return yy::parser::make_KEY_VAL (yytext);
	YY_BREAK
case 45:
YY_RULE_SETUP
return yy::parser::make_KEY_VAL (yytext);
	YY_BREAK
case 46:
YY_RULE_SETUP
return yy::parser::make_INDEX_FIRST (yytext);
	YY_BREAK
case 47:
YY_RULE_SETUP
return yy::parser::make_INDEX_LAST (yytext);
	YY_BREAK
case 48:
YY_RULE_SETUP
return yy::parser::make_CASE    ();
	YY_BREAK
case 49:
YY_RULE_SETUP
return yy::parser::make_TRUE    ();
	YY_BREAK
case 50:
YY_RULE_SETUP
return yy::parser::make_FALSE    ();
	YY_BREAK
case 51:
YY_RULE_SETUP
return yy::parser::make_INFINITY(yytext);
	YY_BREAK
case 52:
YY_RULE_SETUP
return  yy::parser::make_NAN(yytext);
	YY_BREAK
case 53:
YY_RULE_SETUP
return yy::parser::make_NULL_VAL ();
	YY_BREAK
case 54:
YY_RULE_SETUP
return yy::parser::make_UUID(yytext); 
	YY_BREAK
case 55:
YY_RULE_SETUP
return yy::parser::make_OID(yytext); 
	YY_BREAK
case 56:
YY_RULE_SETUP
return yy::parser::make_TIMESTAMP(yytext);
	YY_BREAK
case 57:
YY_RULE_SETUP
return yy::parser::make_LINK (yytext);
	YY_BREAK
case 58:
YY_RULE_SETUP
return yy::parser::make_TYPED_LINK (yytext);
	YY_BREAK
case 59:
YY_RULE_SETUP
return yy::parser::make_NATURAL0 (yytext);
	YY_BREAK
case 60:
YY_RULE_SETUP
return yy::parser::make_ARG(yytext); 
	YY_BREAK
case 61:
YY_RULE_SETUP
return yy::parser::make_NUMBER (yytext);
	YY_BREAK
case 62:
YY_RULE_SETUP
return yy::parser::make_NUMBER (yytext);
	YY_BREAK
case 63:
YY_RULE_SETUP
return yy::parser::make_FLOAT (yytext);
	YY_BREAK
case 64:
YY_RULE_SETUP
return yy::parser::make_FLOAT (yytext);
	YY_BREAK
case 65:
YY_RULE_SETUP
return yy::parser::make_BASE64(yytext);
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
return yy::parser::make_STRING (yytext);
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
return yy::parser::make_STRING (yytext);
	YY_BREAK
case 68:
YY_RULE_SETUP
return yy::parser::make_ID (check_escapes(yytext));
	YY_BREAK
case 69:
YY_RULE_SETUP
{
             throw yy::parser::syntax_error
               ("invalid character: " + std::string(yytext));
           }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
return yy::parser::make_END ();
	YY_BREAK
case 70:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */


/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 430 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 430 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 429);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

    
        b->yy_is_interactive = 0;
    

/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */


/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */


/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */





/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */


/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}


/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */


/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */


/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */


/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */




/* %ok-for-header */




void realm::query_parser::ParserDriver::scan_begin (yyscan_t yyscanner, bool trace_scanning)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = trace_scanning;
    yy_scan_buffer(parse_buffer.data(), int(parse_buffer.size()), yyscanner);
}

