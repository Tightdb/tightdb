#!groovy

@NonCPS
def parseJson(json) {
  def slurper = new groovy.json.JsonSlurperClassic()
  def ret = slurper.parseText(json)
  slurper = null
  return ret
}

def curl(verb, baseUrl, httpAuth, path, extraParams) {
  sh """
    curl -sX '${verb}' 'https://${httpAuth}@${baseUrl}/${path}' -o 'output' ${extraParams}
  """
  def output = readFile('output')
  sh 'rm -rf output'
  return parseJson(output)
}

def packageCloudAPI(verb, path, extraParams = '') {
  withCredentials([[
    $class: 'UsernamePasswordMultiBinding',
    credentialsId: '14f8156d-c57c-4968-b7ea-f67bef26d812',
    passwordVariable: 'api_token',
    usernameVariable: 'api_username']])
  {
    def ret = curl(verb, 'packagecloud.io', "${env.api_token}:", path, extraParams)
    return ret
  }
}

@NonCPS
def findToken(tokens, name) {
  tokens['read_tokens'].find { token -> token['name'] == name }
}

def getMasterToken(repoName) {
  def masterToken
  withCredentials([[$class: 'StringBinding', credentialsId: "packagecloud-${repoName}-master-token", variable: 'PACKAGECLOUD_MASTER_TOKEN']]) {
    masterToken = env.PACKAGECLOUD_MASTER_TOKEN
  }
  return masterToken
}

def getReadToken(masterToken, repoName) {
  def tokenName = 'publisher'
  def tokens = packageCloudAPI('GET', "/api/v1/repos/realm/${repoName}/master_tokens/${masterToken}/read_tokens.json")
  def token = findToken(tokens, tokenName)
  if (token == false) {
    def extraParams = "-F 'read_token[name]=${tokenName}'"
    token = packageCloudAPI('POST', "/api/v1/repos/realm/${repoName}/master_tokens/${masterToken}/read_tokens.json", extraParams)
  }
  return token['value']
}

def pushToPackageCloud(repoName, fileName, distroId) {
  def extraParams = "-F 'package[distro_version_id]=${distroId}' -F 'package[package_file]=@${fileName}'"
  def ret = packageCloudAPI('POST', "/api/v1/repos/realm/${repoName}/packages.json", extraParams)
  echo "${ret}"
}

def getPackageCloudDistributionID(fileType, distroName, distroVersion) {
  for (distribution in packageCloudAPI('GET', '/api/v1/distributions')[fileType]) {
    if (distribution['index_name'] == distroName) {
      for (version in distribution['versions']) {
        if (version['index_name'] == "${distroVersion}") {
          return version['id']
        }
      }
    }
  }
}

def setBuildName(newBuildName) {
  currentBuild.displayName = "${currentBuild.displayName} - ${newBuildName}"
}

def pullPackages(packages, fileType, distroName, distroVersion) {
  def repoName = "sync-devel"
  def masterToken = getMasterToken(repoName)
  def readToken = getReadToken(masterToken, repoName)
  for(packageName in packages) {
    if(distroName == 'el') {
      sh "curl -L -s -f -O -XGET https://${readToken}:@packagecloud.io/realm/sync-devel/${distroName}/${distroVersion}/x86_64/${packageName}-${RPM_VERSION}.${distroName}${distroVersion}.x86_64.rpm"
    } else if(distroName == 'ubuntu') {
      sh "curl -L -s -f -O -XGET https://${readToken}:@packagecloud.io/realm/sync-devel/${distroName}/${distroVersion}/amd64/${packageName}_${DEB_VERSION}_amd64.deb"
    }
  }
}

def pushPackages(packages, fileType, distroName, distroVersion) {
  def distroId = getPackageCloudDistributionID(fileType, distroName, distroVersion)
  for(packageName in packages) {
    if(distroName == 'el') {
      pushToPackageCloud('sync', "${packageName}-${RPM_VERSION}.${distroName}${distroVersion}.x86_64.rpm", distroId)
    } else if(distroName == 'ubuntu') {
      pushToPackageCloud('sync', "${packageName}_${DEB_VERSION}_amd64.deb", distroId)
    }
  }
}

node {
  setBuildName("${RPM_VERSION}")
  
  def rpmPackages = ['realm', 'realm-devel', 'realm-node', 'realm-node-devel', 'realm-utils']
  def debPackages = ['librealm', 'librealm-dev', 'librealm-node', 'librealm-node-dev', 'realm-utils']

  dir("packages") {
    pullPackages(rpmPackages, 'rpm', 'el', 6)
    pullPackages(rpmPackages, 'rpm', 'el', 7)
    pullPackages(debPackages, 'deb', 'ubuntu', 'xenial')

    pushPackages(rpmPackages, 'rpm', 'el', 6)
    pushPackages(rpmPackages, 'rpm', 'el', 7)
    pushPackages(debPackages, 'deb', 'ubuntu', 'xenial')
  }
}
